name: Files Build Pipeline

on:
  push:
    branches-ignore:
    - 'dependabot**'
    tags-ignore:
    - '**'
  pull_request:
    paths-ignore:
    - '**.md'
    - '.github/**'
  workflow_dispatch:
    inputs:
      build_with_preview_boolean:
        description: 'Build with Preview as well:'
        type: boolean
        required: false
        default: false
      build_with_release_boolean:
        description: 'Build with Stable & Store as well:'
        type: boolean
        required: false
        default: false
  schedule:
    - cron: '0 0 * * *'

jobs:

  setup:
    runs-on: windows-latest
    env:
      DEFAULT_DIR: ${{ github.workspace }} # Default: D:\a\Files\Files\
    outputs:
      matrix: ${{ steps.initialize_strategy_matrix.outputs.matrix }}
    steps:
      - name: Initialize strategy matrix
        id: initialize_strategy_matrix
        shell: pwsh
        run: |
          # Create a static variable for strategy matrix
          $Matrix = @{
            include = @( [ordered]@{
                configuration= "Debug"
                platform = "x64"
              }, [ordered]@{
                configuration= "Debug"
                platform = "arm64"
              }, [ordered]@{
                configuration= "Debug"
                platform = "x86"
              }
            )
          }
          # Preview configuration
          $PreviewConfiguration = @( [ordered]@{
              configuration= "Preview"
              platform = "x86"
            }
          )
          # Stable configuration
          $StableConfiguration = @( [ordered]@{
              configuration= "Stable"
              platform = "x86"
            }
          )
          # Store configuration
          $StoreConfiguration = @( [ordered]@{
              configuration= "Store"
              platform = "x86"
            }
          )
          # Manually triggered the Actions
          if ( ( $env:GITHUB_EVENT -ne 'push' ) -and `
                ( $env:GITHUB_EVENT -ne 'pull_request' ) -and `
                ( $env:GITHUB_EVENT -eq 'workflow_dispatch' ) -and `
                ( $env:GITHUB_REF -eq 'refs/heads/main' ) )
          {
            if ( ( $env:WORKFLOW_DISPATCH_PREVIEW_BOOLEAN -eq $true ) )
            {
              $Matrix.include.Add($PreviewConfiguration)
            }
            if ( ( $env:WORKFLOW_DISPATCH_RELEASE_BOOLEAN -eq $true ) )
            {
              $Matrix.include.Add($StableConfiguration)
              $Matrix.include.Add($StoreConfiguration)
            }
          }
          echo "::set-output name=matrix::$($Matrix | ConvertTo-Json -depth 32 -Compress)"
        env:
          GITHUB_REF: ${{ github.ref }}
          GITHUB_EVENT: ${{ github.event_name }}
          WORKFLOW_DISPATCH_PREVIEW_BOOLEAN:  ${{ inputs.build_with_preview_boolean }}
          WORKFLOW_DISPATCH_RELEASE_BOOLEAN:  ${{ inputs.build_with_release_boolean }}

  build:
    needs: setup
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    env:
      SOLUTION_NAME: 'Files.sln'
      PACKAGE_PROJECT_NAME: 'src/Files.App (Package)/Files.Package.wapproj'
      PROJECT_RESTORE_PLATFORM: ${{ matrix.platform }}
      CONFIGURATION: ${{ matrix.configuration }}
      PLATFORM: ${{ matrix.platform }}
      DEFAULT_DIR: ${{ github.workspace }} # Default: D:\a\Files\Files\
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v3
  
    - name: Setup MSBuild
      id: setup_msbuild
      uses: microsoft/setup-msbuild@v1

    - name: Setup NuGet
      id: setup-nuget
      uses: NuGet/setup-nuget@v1.1.1

    - name: Setup .NET 7
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.x'
  
    - name: Restore Files
      id: restore_project
      shell: pwsh
      run: |
        msbuild $env:SOLUTION_NAME `
        -t:Restore `
        -p:Platform=$env:PROJECT_RESTORE_PLATFORM `
        -p:Configuration=$env:CONFIGURATION `
        -p:PublishReadyToRun=true `
    - name: Restore NuGet
      id: restore_nuget
      shell: pwsh
      run: 'nuget restore $env:SOLUTION_NAME'

    - name: Create PFX certification file
      id: create_pfx_certification_file
      shell: pwsh
      run: |
        $SIGNING_CERT_BASE64_STR = $env:SIGNING_CERT_BASE64_STR
        $SIGNING_CERT_OUTPUT_FILE = "$env:DEFAULT_DIR\cert.pfx"
        
        $SIGNING_CERT_BASE64_BYTE = [Convert]::FromBase64String($SIGNING_CERT_BASE64_STR)
        [IO.File]::WriteAllBytes($SIGNING_CERT_OUTPUT_FILE, $SIGNING_CERT_BASE64_BYTE)
      env:
        SIGNING_CERT_BASE64_STR: ${{ secrets.PACKAGE_CERTIFICATE_BASE64 }}

    - if: matrix.configuration == 'Debug'
      name: Build Files (Debug)
      id: build_app_with_debug
      shell: pwsh
      run: |
        msbuild $env:PACKAGE_PROJECT_NAME `
        -t:Build `
        -p:Platform=$env:PLATFORM `
        -p:Configuration=$env:CONFIGURATION `
        -p:AppxBundle=Never `
    - if: matrix.configuration == 'Release'
      name: Build Files (Release)
      id: build_app_with_release
      shell: pwsh
      run: |
        msbuild $env:PACKAGE_PROJECT_NAME `
        -t:Build `
        -t:_GenerateAppxPackage `
        -p:Platform=$env:PLATFORM `
        -p:Configuration=$env:CONFIGURATION `
        -p:AppxBundle=Always `
        -p:AppxBundlePlatforms=$env:PLATFORM `
        -p:AppxLogTelemetryFromSideloadingScript=false `
        -p:AppxPackageDir=$env:APPX_PACKAGE_DIR `
        -p:AppxPackageSigningEnabled=true `
        -p:GenerateAppInstallerFile=true `
        -p:PackageCertificateKeyFile=$env:PACKAGE_CERTIFICATE_KEYFILE `
        -p:PackageCertificatePassword=$env:PACKAGE_CERTIFICATE_PASSWORD `
        -p:PackageCertificateThumbprint="" `
        -p:UapAppxPackageBuildMode=Sideload `
        -p:AppInstallerUri=https://cdn.files.community/files/preview/ `
      env:
        APPX_PACKAGE_DIR: ${{ github.workspace }}\AppxPackages
        PACKAGE_CERTIFICATE_KEYFILE: ${{ github.workspace }}\cert.pfx
        PACKAGE_CERTIFICATE_PASSWORD: ${{ secrets.PACKAGE_CERTIFICATE_PASSWORD }}

    - if: matrix.configuration == 'Preview'
      name: Build Files (Preview)
      id: build_app_with_preview
      shell: pwsh
      run: |
        msbuild $env:PACKAGE_PROJECT_NAME `
        -t:Build `
        -t:_GenerateAppxPackage `
        -p:Platform=$env:PLATFORM `
        -p:Configuration=$env:CONFIGURATION `
        -p:AppxBundle=Always `
        -p:AppxBundlePlatforms=$env:PLATFORM `
        -p:AppxLogTelemetryFromSideloadingScript=false `
        -p:AppxPackageDir=$env:APPX_PACKAGE_DIR `
        -p:AppxPackageSigningEnabled=true `
        -p:GenerateAppInstallerFile=true `
        -p:PackageCertificateKeyFile=$env:PACKAGE_CERTIFICATE_KEYFILE `
        -p:PackageCertificatePassword=$env:PACKAGE_CERTIFICATE_PASSWORD `
        -p:PackageCertificateThumbprint="" `
        -p:UapAppxPackageBuildMode=Sideload `
        -p:AppInstallerUri=https://cdn.files.community/files/preview/ `
      env:
        APPX_PACKAGE_DIR: ${{ github.workspace }}\AppxPackages
        PACKAGE_CERTIFICATE_KEYFILE: ${{ github.workspace }}\cert.pfx
        PACKAGE_CERTIFICATE_PASSWORD: ${{ secrets.PACKAGE_CERTIFICATE_PWD }}

    - if: matrix.configuration == 'Stable'
      name: Build Files (Stable)
      id: build_app_with_stable
      shell: pwsh
      run: |
        msbuild $env:PACKAGE_PROJECT_NAME `
        -t:Build `
        -t:_GenerateAppxPackage `
        -p:Platform=$env:PLATFORM `
        -p:Configuration=$env:CONFIGURATION `
        -p:AppxBundle=Always `
        -p:AppxBundlePlatforms=$env:PLATFORM `
        -p:AppxLogTelemetryFromSideloadingScript=false `
        -p:AppxPackageDir=$env:APPX_PACKAGE_DIR `
        -p:GenerateAppInstallerFile=true `
        -p:AppxPackageSigningEnabled=true `
        -p:PackageCertificateKeyFile=$env:PACKAGE_CERTIFICATE_KEYFILE `
        -p:PackageCertificatePassword=$env:PACKAGE_CERTIFICATE_PASSWORD `
        -p:PackageCertificateThumbprint="" `
        -p:UapAppxPackageBuildMode=Sideload `
        -p:AppInstallerUri=https://cdn.files.community/files/stable/ `
      env:
        APPX_PACKAGE_DIR: ${{ github.workspace }}\AppxPackages
        PACKAGE_CERTIFICATE_KEYFILE: ${{ github.workspace }}\cert.pfx
        PACKAGE_CERTIFICATE_PASSWORD: ${{ secrets.PACKAGE_CERTIFICATE_PASSWORD }}

    - if: matrix.configuration == 'Store'
      name: Build Files (Store)
      id: build_app_with_store
      shell: pwsh
      run: |
        msbuild $env:PACKAGE_PROJECT_NAME `
        -t:Build `
        -t:_GenerateAppxPackage `
        -p:Platform=$env:PLATFORM `
        -p:Configuration=$env:CONFIGURATION `
        -p:AppxBundle=Always `
        -p:AppxBundlePlatforms=$env:PLATFORM `
        -p:AppxLogTelemetryFromSideloadingScript=false `
        -p:AppxPackageDir=$env:APPX_PACKAGE_DIR `
        -p:GenerateAppInstallerFile=true `
        -p:AppxPackageSigningEnabled=true `
        -p:PackageCertificateKeyFile=$env:PACKAGE_CERTIFICATE_KEYFILE `
        -p:PackageCertificatePassword=$env:PACKAGE_CERTIFICATE_PASSWORD `
        -p:PackageCertificateThumbprint="" `
        -p:UapAppxPackageBuildMode=Sideload `
        -p:AppInstallerUri=https://cdn.files.community/files/preview/ `
      env:
        APPX_PACKAGE_DIR: ${{ github.workspace }}\AppxPackages
        PACKAGE_CERTIFICATE_KEYFILE: ${{ github.workspace }}\cert.pfx
        PACKAGE_CERTIFICATE_PASSWORD: ${{ secrets.PACKAGE_CERTIFICATE_PASSWORD }}

    - name: Upload build artifacts
      id: upload_artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Build artifacts
        path: ${{ github.workspace }}\AppxPackages
