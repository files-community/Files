# Copyright (c) 2023 Files Community
# Licensed under the MIT License. See the LICENSE.

# Abstract:
#  - This CI is executed manually by the maintainer of Files.
#  - Handles Preview and Store verions to deploy.

name: Files Deploy

on:
  workflow_dispatch:

env:
  WORKING_DIR: ${{ github.workspace }} # Default: 'D:\a\Files\Files'
  SOLUTION_PATH: '${{ github.workspace }}\Files.sln'
  PACKAGE_PROJECT_DIR: '${{ github.workspace }}\src\Files.App (Package)'
  PACKAGE_PROJECT_PATH: '${{ github.workspace }}\src\Files.App (Package)\Files.Package.wapproj'
  AUTOMATED_TESTS_ARCHITECTURE: 'x64'
  AUTOMATED_TESTS_CONFIGURATION: 'Release'
  AUTOMATED_TESTS_PROJECT_DIR: '${{ github.workspace }}\tests\Files.InteractionTests'
  AUTOMATED_TESTS_PROJECT_PATH: '${{ github.workspace }}\tests\Files.InteractionTests\Files.InteractionTests.csproj'
  AUTOMATED_TESTS_ASSEMBLY_DIR: '${{ github.workspace }}\artifacts\TestsAssembly'
  ARTIFACTS_STAGING_DIR:  '${{ github.workspace }}\artifacts'
  APPX_PACKAGE_DIR: '${{ github.workspace }}\artifacts\AppxPackages'
  APPX_SELFSIGNED_CERT_PATH: '${{ github.workspace }}\.github\workflows\FilesApp_SelfSigned.pfx'
  APPX_BUNDLE_PLATFORMS: 'x64|arm64'
  WINAPPDRIVER_EXE86_PATH: 'C:\Program Files (x86)\Windows Application Driver\WinAppDriver.exe'
  WINAPPDRIVER_EXE64_PATH: 'C:\Program Files\Windows Application Driver\WinAppDriver.exe'

jobs:
  deploy:
    runs-on: windows-latest
    environment: Deployments
    strategy:
      fail-fast: false
      matrix:
        configuration: [Preview]
        platform: [x64]
    env:
      CONFIGURATION: ${{ matrix.configuration }}
      PLATFORM: ${{ matrix.platform }}

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v3

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.1.1

    - name: Setup .NET 7
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.x'

    # TODO: Move the command to PowerShell script instead
    - name: Update Package.appxmanifest
      shell: pwsh
      run: |
        [xml]$xmlDoc = Get-Content "$env:PACKAGE_PROJECT_DIR\Package.appxmanifest"
        $xmlDoc.Package.Identity.Name="FilesPreview"
        $xmlDoc.Package.Identity.Publisher="$env:SIDELOAD_PUBLISHER_SECRET"
        $xmlDoc.Package.Properties.DisplayName="Files - Preview"
        $xmlDoc.Package.Applications.Application.VisualElements.DisplayName="Files - Preview"
        $xmlDoc.Save("$env:PACKAGE_PROJECT_DIR\Package.appxmanifest")
      env:
        SIDELOAD_PUBLISHER_SECRET: ${{ secrets.SIDELOAD_PUBLISHER_SECRET }}

    # TODO: Move the command to PowerShell script instead
    - name: Use the ${{ env.CONFIGURATION }} logo sets
      shell: pwsh
      run: |
        Get-ChildItem "$env:WORKING_DIR\src" -Include *.csproj, *.appxmanifest, *.wapproj, *.xaml -recurse | ForEach -Process `
        { `
          (Get-Content $_ -Raw | ForEach -Process { $_ -replace "Assets\\AppTiles\\Dev", "Assets\AppTiles\Preview" }) | `
          Set-Content $_ -NoNewline `
        }

    - name: Inject the Bing Maps API token
      shell: pwsh
      run: |
        Get-ChildItem "$env:WORKING_DIR\src" -Include *.cs -recurse | ForEach-Object -Process `
        { `
          (Get-Content $_ -Raw | ForEach-Object -Process { $_ -replace "bingmapskey.secret", "$env:BING_MAPS_SECRET" }) | `
          Set-Content $_ -NoNewline `
        }
      env:
        BING_MAPS_SECRET: ${{ secrets.BING_MAPS_SECRET }}

    - name: Inject the AppCenter token
      shell: pwsh
      run: |
        Get-ChildItem "$env:WORKING_DIR\src" -Include *.cs -recurse | ForEach-Object -Process `
        { `
          (Get-Content $_ -Raw | ForEach-Object -Process { $_ -replace "appcenter.secret", "$env:APP_CENTER_SECRET" }) | `
          Set-Content $_ -NoNewline `
        }
      env:
        APP_CENTER_SECRET: ${{ secrets.APP_CENTER_SECRET }}

    - name: Inject the GitHub OAuth client ID
      run: |
        Get-ChildItem "$env:WORKING_DIR\src" -Include *.cs -recurse | ForEach-Object -Process `
        { `
          (Get-Content $_ -Raw | ForEach-Object -Process { $_ -replace "githubclientid.secret", "$env:GH_OAUTH_CLIENT_ID" }) | `
          Set-Content $_ -NoNewline `
        }
      env:
        GH_OAUTH_CLIENT_ID: ${{ secrets.GH_OAUTH_CLIENT_ID }}

    - name: Use Windows SDK Preview
      shell: cmd
      run: |
        for /f %%a in ('dir /b /a:d %localappdata%\Microsoft\VisualStudio\17*') do echo UsePreviews=True>%localappdata%\Microsoft\VisualStudio\%%a\sdk.txt

    - name: Restore NuGet
      shell: pwsh
      run: 'nuget restore $env:SOLUTION_PATH'

    - name: Restore Files
      shell: pwsh
      run: |
        msbuild $env:SOLUTION_PATH `
        -t:Restore `
        -p:Platform=$env:PLATFORM `
        -p:Configuration=$env:CONFIGURATION `
        -p:PublishReadyToRun=true

    - name: Build, package & publish Files
      shell: pwsh
      run: |
        msbuild "$env:PACKAGE_PROJECT_PATH" `
        -t:Build `
        -t:_GenerateAppxPackage `
        -p:Platform=$env:PLATFORM `
        -p:Configuration=$env:CONFIGURATION `
        -p:AppxBundlePlatforms=$env:APPX_BUNDLE_PLATFORMS `
        -p:AppxPackageDir="$env:APPX_PACKAGE_DIR" `
        -p:AppxBundle=Always `
        -p:UapAppxPackageBuildMode=Sideload `
        -p:GenerateAppInstallerFile=True `
        -p:AppInstallerUri=https://cdn.files.community/files/preview/

    # NOTE: actions/upload-artifact sometimes fail because of having empty file 
    - name: Remove empty files from the packages
      shell: bash
      run: find $ARTIFACTS_STAGING_DIR -empty -delete

    - name: Sign files with Azure Code Signing
      uses: azure/azure-code-signing-action@v0.2.21
      with:
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        endpoint: https://wus2.codesigning.azure.net/
        code-signing-account-name: ${{ secrets.SIGNING_ACCOUNT_NAME }}
        certificate-profile-name: ${{ secrets.SIGNING_PROFILE_NAME }}
        files-folder: ${{ env.APPX_PACKAGE_DIR }}
        files-folder-filter: msixbundle
        files-folder-recurse: true
        files-folder-depth: 4
        file-digest: SHA256
        timestamp-rfc3161: http://timestamp.acs.microsoft.com
        timestamp-digest: SHA256

    - name: Log in to the Azure
      uses: azure/login@v1
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Upload to the blob storage
      uses: azure/powershell@v1
      with:
        azPSVersion: "latest"
        inlineScript: |
          az storage blob upload-batch --account-name "filescommunity" --destination "files" --destination-path "test" --source ${{ env.APPX_PACKAGE_DIR }} --overwrite true

    - name: Log out from the Azure
      run: |
          az logout
          
      name: Upload the packages to the Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: 'Appx Packages (${{ env.CONFIGURATION }}, ${{ env.PLATFORM }})'
        path: ${{ env.ARTIFACTS_STAGING_DIR }}
