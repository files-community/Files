using Files.Core.SourceGenerator.Data;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml.Linq;

namespace Files.Core.SourceGenerator
{
	[Generator(LanguageNames.CSharp)]
	public sealed class StringsPropertyGenerator : IIncrementalGenerator
	{
		public void Initialize(IncrementalGeneratorInitializationContext context)
		{
			var additionalFiles = context
				.AdditionalTextsProvider.Where(af => af.Path.Contains("en-US\\Resources"))
				.Select((f, _) => new AdditionalTextWithHash(f, Guid.NewGuid()));

			context.RegisterSourceOutput(additionalFiles, Execute);
		}

		private void Execute(SourceProductionContext ctx, AdditionalTextWithHash fileWithHash)
		{
			var sb = new StringBuilder();
			sb.AppendLine("/// <auto-generated />");
			sb.AppendLine();
			sb.AppendLine($"// Copyright (c) {DateTime.Now.Year} Files Community");
			sb.AppendLine("// Licensed under the MIT License. See the LICENSE.");
			sb.AppendLine();
			sb.AppendLine("namespace Files.App.Helpers");
			sb.AppendLine("{");
			sb.AppendLine("    public sealed partial class Strings");
			sb.AppendLine("    {");

			foreach (var key in ReadAllKeys(fileWithHash.File))
			{
				if (key is null)
					continue;

				AddKey(ref sb, key);
			}

			sb.AppendLine("    }");
			sb.AppendLine("}");

			var sourceText = SourceText.From(sb.ToString(), Encoding.UTF8);

			ctx.AddSource($"Strings.Properties.{fileWithHash.Hash}.g.cs", sourceText);
		}

		private void AddKey(ref StringBuilder sb, string key)
		{
			sb.AppendLine($"        public const string {KeyNameValidator(key)} = \"{key}\";");
		}

		private IEnumerable<string> ReadAllKeys(AdditionalText file)
		{
			// For RESW file
			if (file.Path.EndsWith(".resw"))
			{
				var document = XDocument.Load(file.Path);
				var keys = document
					.Descendants("data")
					.Select(element => element.Attribute("name").Value)
					.Where(key => key != null);

				return keys ?? [];
			}

			// For JSON file
			if (file.Path.EndsWith(".json"))
			{
				return [];
			}

			// For others
			return [];
		}

		private string KeyNameValidator(string key)
		{
			return key
				.Replace('+', 'P')
				.Replace(' ', '_')
				.Replace(".", "");
		}
	}
}
