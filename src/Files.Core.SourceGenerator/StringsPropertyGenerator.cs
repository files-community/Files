using Files.Core.SourceGenerator.Data;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace Files.Core.SourceGenerator
{
	[Generator(LanguageNames.CSharp)]
	public sealed class StringsPropertyGenerator : IIncrementalGenerator
	{
		public void Initialize(IncrementalGeneratorInitializationContext context)
		{
			var additionalFiles = context
				.AdditionalTextsProvider.Where(af => af.Path.Contains("en-US\\Resources"))
				.Select((f, _) => new AdditionalTextWithHash(f, Guid.NewGuid()));

			context.RegisterSourceOutput(additionalFiles, Execute);
		}

		public void Execute(SourceProductionContext ctx, AdditionalTextWithHash fileWithHash)
		{
			var sb = new StringBuilder()
				.AppendLine("/// <auto-generated />")
				.AppendLine()
				.AppendLine("// Copyright (c) 2024 Files Community")
				.AppendLine("// Licensed under the MIT License. See the LICENSE.")
				.AppendLine()
				.AppendLine("namespace Files.App.Helpers")
				.AppendLine("{")
				.AppendLine("    public sealed partial class Strings")
				.AppendLine("    {")
				.AppendLine($"        public const string Found = @\"{fileWithHash.File.Path}\";")
				.AppendLine("    }")
				.AppendLine("}");

			var sourceText = SourceText.From(sb.ToString(), Encoding.UTF8);

			ctx.AddSource($"Strings.Properties.{fileWithHash.Hash}.g.cs", sourceText);
		}
	}
}
