// Copyright (c) 2024 Files Community
// Licensed under the MIT License. See the LICENSE.

namespace Files.Core.SourceGenerator.Extensions
{
	/// <summary>
	/// Provides extension methods for the <see cref="StringBuilder"/> class.
	/// </summary>
	internal static class StringBuilderExtensions
	{
		/// <summary>
		/// Appends an auto-generated header to the <see cref="StringBuilder"/> instance.
		/// </summary>
		/// <param name="sb">The <see cref="StringBuilder"/> instance to append to.</param>
		/// <param name="fromData">Optional data to include in the header. If null or empty, only the closing tag is appended.</param>
		/// <returns>The <see cref="StringBuilder"/> instance with the appended header.</returns>
		internal static StringBuilder AppendAutoGeneratedHeader(this StringBuilder sb, string? fromData = null)
		{
			return string.IsNullOrEmpty(fromData)
				? sb.AppendLine("/// <auto-generated/>")
				: sb.AppendLine("/// <auto-generated>")
					.AppendLine($"/// From: {fromData}")
					.AppendLine("/// </auto-generated>");
		}

		/// <summary>
		/// Appends a license header to the <see cref="StringBuilder"/> instance.
		/// </summary>
		/// <param name="sb">The <see cref="StringBuilder"/> instance to append to.</param>
		/// <returns>The <see cref="StringBuilder"/> instance with the appended license header.</returns>
		internal static StringBuilder AppendLicenceHeader(this StringBuilder sb)
		{
			return sb.AppendLine($"// Copyright (c) {DateTime.Now.Year} Files Community")
				.AppendLine("// Licensed under the MIT License. See the LICENSE.");
		}

		/// <summary>
		/// Appends a full header, including auto-generated and license information, to the <see cref="StringBuilder"/> instance.
		/// </summary>
		/// <param name="sb">The <see cref="StringBuilder"/> instance to append to.</param>
		/// <param name="fromData">Optional data to include in the auto-generated header. If null or empty, only the closing tag is appended.</param>
		/// <returns>The <see cref="StringBuilder"/> instance with the appended full header.</returns>
		internal static StringBuilder AppendFullHeader(this StringBuilder sb, string? fromData = null)
		{
			return sb.AppendAutoGeneratedHeader(fromData)
				.AppendLine()
				.AppendLicenceHeader();
		}
	}
}

