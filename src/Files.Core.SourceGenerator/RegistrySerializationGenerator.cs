using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using System.Collections.Generic;
using System.Text;

namespace Files.Core.SourceGenerator
{
	[Generator]
	public sealed class RegistrySerializationGenerator : IIncrementalGenerator
	{
		public void Initialize(IncrementalGeneratorInitializationContext context)
		{
			var valueProvider = context.SyntaxProvider.ForAttributeWithMetadataName("Files.Shared.RegistrySerializableAttribute",
				(node, _) => node.IsKind(SyntaxKind.ClassDeclaration),
				(ctx, _) => (ITypeSymbol)ctx.TargetSymbol);

			context.RegisterSourceOutput(valueProvider, (ctx, symbol) =>
			{
				var queue = new Queue<ITypeSymbol>();
				var generatedTypes = new HashSet<ITypeSymbol>(SymbolEqualityComparer.Default);
				queue.Enqueue(symbol);

				var sb = new StringBuilder();

				sb.AppendLine("/// <auto-generated />");
				sb.AppendLine();
				sb.AppendLine("// Copyright (c) 2024 Files Community");
				sb.AppendLine("// Licensed under the MIT License. See the LICENSE.");
				sb.AppendLine();
				sb.AppendLine("using System;");
				sb.AppendLine("using System.Runtime.CompilerServices;");
				sb.AppendLine("using Microsoft.Win32;");
				sb.AppendLine();
				sb.AppendLine($"namespace {symbol.ContainingNamespace};");
				sb.AppendLine();
				sb.AppendLine($"internal sealed class {symbol.Name}Registry");
				sb.AppendLine("{");
				sb.AppendLine();

				while (queue.Count > 0)
				{
					var type = queue.Dequeue();
					if (!generatedTypes.Add(type))
					{
						continue;
					}

					EmitBindValues(sb, queue, type);
					EmitSaveValues(sb, queue, type);
				}

				sb.AppendLine("}");

				ctx.AddSource($"{symbol.Name}Registry.g.cs", sb.ToString());
			});
		}

		private void EmitBindValues(StringBuilder sb, Queue<ITypeSymbol> queue, ITypeSymbol type)
		{
			sb.AppendLine($"	internal static void BindValues(RegistryKey key, {type.Name} target, string prefix = \"\")");
			sb.AppendLine("	{");

			sb.AppendLine(
				$$"""
								if (target is null)
								{
									return;
								}
						""");

			var properties = new Queue<(ITypeSymbol Type, string Name, bool EmitNullBranch)>();
			foreach (var member in type.GetMembers())
			{
				if (member is IPropertySymbol { IsReadOnly: false } property)
				{
					properties.Enqueue((property.Type, property.Name, false));
				}
			}

			while (properties.Count > 0)
			{
				var (propertyType, propertyName, emitNullBranch) = properties.Dequeue();

				switch (propertyType)
				{
					case { SpecialType: SpecialType.System_String }:
						sb.AppendLine(
							$$"""
										if (key.GetValue($"{prefix}{{propertyName}}") is string valueOf{{propertyName}})
										{
											target.{{propertyName}} = valueOf{{propertyName}};
										}
								""");
						break;
					case { SpecialType: SpecialType.System_Boolean }:
						sb.AppendLine(
							$$"""
										if (key.GetValue($"{prefix}{{propertyName}}") is int valueOf{{propertyName}})
										{
											target.{{propertyName}} = valueOf{{propertyName}} is not 0;
										}
								""");
						EmitNullBranch(emitNullBranch, propertyName);
						break;
					case
					{
						SpecialType: SpecialType.System_Byte or
										SpecialType.System_SByte or
										SpecialType.System_UInt16 or
										SpecialType.System_Int16 or
										SpecialType.System_UInt32 or
										SpecialType.System_Int32
					}:
						sb.AppendLine(
							$$"""
										if (key.GetValue($"{prefix}{{propertyName}}") is int valueOf{{propertyName}})
										{
											target.{{propertyName}} = ({{propertyType}})valueOf{{propertyName}};
										}
								""");
						EmitNullBranch(emitNullBranch, propertyName);
						break;
					case
					{
						SpecialType: SpecialType.System_UInt64 or
										SpecialType.System_Int64
					}:
						sb.AppendLine(
							$$"""
										if (key.GetValue($"{prefix}{{propertyName}}") is long valueOf{{propertyName}})
										{
											target.{{propertyName}} = ({{propertyType}})valueOf{{propertyName}};
										}
								""");
						EmitNullBranch(emitNullBranch, propertyName);
						break;
					case { SpecialType: SpecialType.System_Single }:
						sb.AppendLine(
							$$"""
										if (key.GetValue($"{prefix}{{propertyName}}") is int valueOf{{propertyName}})
										{
											target.{{propertyName}} = BitConverter.Int32BitsToSingle(valueOf{{propertyName}});
										}
								""");
						EmitNullBranch(emitNullBranch, propertyName);
						break;
					case { SpecialType: SpecialType.System_Double }:
						sb.AppendLine(
							$$"""
										if (key.GetValue($"{prefix}{{propertyName}}") is long valueOf{{propertyName}})
										{
											target.{{propertyName}} = BitConverter.Int64BitsToDouble(valueOf{{propertyName}});
										}
								""");
						EmitNullBranch(emitNullBranch, propertyName);
						break;
					case { TypeKind: TypeKind.Enum }:
						sb.AppendLine(
							$$"""
										if (key.GetValue($"{prefix}{{propertyName}}") is string valueOf{{propertyName}})
										{
											target.{{propertyName}} = Enum.Parse<{{propertyType}}>(valueOf{{propertyName}});
										}
								""");
						EmitNullBranch(emitNullBranch, propertyName);
						break;
					case INamedTypeSymbol { TypeKind: TypeKind.Struct, NullableAnnotation: NullableAnnotation.Annotated, TypeArguments: [var underlyingType] }:
						properties.Enqueue((underlyingType, propertyName, true));
						break;
					case IArrayTypeSymbol { TypeKind: TypeKind.Array, ElementType.SpecialType: SpecialType.System_String }:
						sb.AppendLine(
							$$"""
										if (key.GetValue($"{prefix}{{propertyName}}") is string[] valueOf{{propertyName}})
										{
											target.{{propertyName}} = valueOf{{propertyName}};
										}
								""");
						break;
					case { TypeKind: TypeKind.Class, SpecialType: SpecialType.None }:
						sb.AppendLine(
							$$"""
										BindValues(key, target.{{propertyName}}, $"{prefix}{{propertyName}}.");
								""");
						queue.Enqueue(propertyType);
						continue;
					default:
						sb.AppendLine($"#warning Reading {propertyType}{(emitNullBranch ? "?" : "")} {propertyName} from Windows Registry is not supported.");
						break;
				}
			}
			sb.AppendLine("	}");
			sb.AppendLine();

			void EmitNullBranch(bool emitNullBranch, string propertyName)
			{
				if (emitNullBranch)
				{
					sb.AppendLine(
						$$"""
										else
										{
											target.{{propertyName}} = null;
										}
								""");
				}
			}
		}

		private void EmitSaveValues(StringBuilder sb, Queue<ITypeSymbol> queue, ITypeSymbol type)
		{
			sb.AppendLine($"	internal static void SaveValues(RegistryKey key, {type.Name} source, string prefix = \"\")");
			sb.AppendLine("	{");

			sb.AppendLine(
				$$"""
								if (source is null)
								{
									foreach (var name in key.GetValueNames())
									{
										if (name.StartsWith(prefix, StringComparison.Ordinal))
										{
											key.DeleteValue(name, false);
										}
									}

									return;
								}
						""");

			var properties = new Queue<(ITypeSymbol Type, string Name, bool EmitNullBranch)>();
			foreach (var member in type.GetMembers())
			{
				if (member is IPropertySymbol { IsReadOnly: false } property)
				{
					properties.Enqueue((property.Type, property.Name, false));
				}
			}

			while (properties.Count > 0)
			{
				var (propertyType, propertyName, emitNullBranch) = properties.Dequeue();

				switch (propertyType)
				{
					case { SpecialType: SpecialType.System_String }:
						sb.AppendLine(
							$$"""
										key.SetValue($"{prefix}{{propertyName}}", source.{{propertyName}}, RegistryValueKind.String);
								""");
						break;
					case { SpecialType: SpecialType.System_Boolean }:
						EmitNullBranch(emitNullBranch, propertyName);
						sb.AppendLine(
							$$"""
										{
											key.SetValue($"{prefix}{{propertyName}}", source.{{propertyName}} ? 1 : 0, RegistryValueKind.DWord);
										}
								""");
						break;
					case
					{
						SpecialType: SpecialType.System_Byte or
										SpecialType.System_SByte or
										SpecialType.System_UInt16 or
										SpecialType.System_Int16 or
										SpecialType.System_UInt32 or
										SpecialType.System_Int32
					}:
						EmitNullBranch(emitNullBranch, propertyName);
						sb.AppendLine(
							$$"""
										{
											key.SetValue($"{prefix}{{propertyName}}", (int)source.{{propertyName}}, RegistryValueKind.DWord);
										}
								""");
						break;
					case
					{
						SpecialType: SpecialType.System_UInt64 or
										SpecialType.System_Int64
					}:
						EmitNullBranch(emitNullBranch, propertyName);
						sb.AppendLine(
							$$"""
										{
											key.SetValue($"{prefix}{{propertyName}}", (long)source.{{propertyName}}, RegistryValueKind.QWord);
										}
								""");
						break;
					case { SpecialType: SpecialType.System_Single }:
						EmitNullBranch(emitNullBranch, propertyName);
						sb.AppendLine(
							$$"""
										{
											key.SetValue($"{prefix}{{propertyName}}", BitConverter.SingleToInt32Bits(source.{{propertyName}}), RegistryValueKind.DWord);
										}
								""");
						break;
					case { SpecialType: SpecialType.System_Double }:
						EmitNullBranch(emitNullBranch, propertyName);
						sb.AppendLine(
							$$"""
										{
											key.SetValue($"{prefix}{{propertyName}}", BitConverter.DoubleToInt64Bits(source.{{propertyName}}), RegistryValueKind.QWord);
										}
								""");
						break;
					case { TypeKind: TypeKind.Enum }:
						EmitNullBranch(emitNullBranch, propertyName);
						sb.AppendLine(
							$$"""
										{
											key.SetValue($"{prefix}{{propertyName}}", source.{{propertyName}}.ToString(), RegistryValueKind.String);
										}
								""");
						break;
					case INamedTypeSymbol { TypeKind: TypeKind.Struct, NullableAnnotation: NullableAnnotation.Annotated, TypeArguments: [var underlyingType] }:
						properties.Enqueue((underlyingType, propertyName, true));
						break;
					case IArrayTypeSymbol { TypeKind: TypeKind.Array, ElementType.SpecialType: SpecialType.System_String }:
						sb.AppendLine(
							$$"""
										{
											key.SetValue($"{prefix}{{propertyName}}", source.{{propertyName}}, RegistryValueKind.MultiString);
										}
								""");
						break;
					case { TypeKind: TypeKind.Class, SpecialType: SpecialType.None }:
						sb.AppendLine(
							$$"""
										SaveValues(key, source.{{propertyName}}, $"{prefix}{{propertyName}}.");
								""");
						queue.Enqueue(propertyType);
						continue;
					default:
						sb.AppendLine($"#warning Saving {propertyType}{(emitNullBranch ? "?" : "")} {propertyName} into Windows Registry is not supported.");
						break;
				}
			}
			sb.AppendLine("	}");
			sb.AppendLine();

			void EmitNullBranch(bool emitNullBranch, string propertyName)
			{
				if (emitNullBranch)
				{
					sb.AppendLine(
						$$"""
										if (source.{{propertyName}} is null)
										{
											key.DeleteValue($"{prefix}{{propertyName}}", false);
										}
										else
								""");
				}
			}
		}
	}
}
