// Copyright (c) 2024 Files Community
// Licensed under the MIT License. See the LICENSE.

namespace Files.Core.SourceGenerator.Generators
{
	[Generator]
	public sealed class StringsPropertyGenerator : IIncrementalGenerator
	{
		public void Initialize(IncrementalGeneratorInitializationContext context)
		{
			var additionalFiles = context
				.AdditionalTextsProvider.Where(af => af.Path.Contains("en-US\\Resources"))
				.Select((f, _) => new AdditionalTextWithHash(f, Guid.NewGuid()));

			context.RegisterSourceOutput(additionalFiles, Execute);
		}

		private void Execute(SourceProductionContext ctx, AdditionalTextWithHash fileWithHash)
		{
			var sb = new StringBuilder();
			_ = sb.AppendLine("/// <auto-generated />");
			_ = sb.AppendLine($"/// {fileWithHash}");
			_ = sb.AppendLine();
			_ = sb.AppendLine($"// Copyright (c) {DateTime.Now.Year} Files Community");
			_ = sb.AppendLine("// Licensed under the MIT License. See the LICENSE.");
			_ = sb.AppendLine();
			_ = sb.AppendLine("namespace Files.App.Resources.Helpers");
			_ = sb.AppendLine("{");
			_ = sb.AppendLine("    public sealed partial class Strings");
			_ = sb.AppendLine("    {");

			foreach (var key in ReadAllKeys(fileWithHash.File))
			{
				AddKey(ref sb, key.Item1, key.Item2);
			}

			_ = sb.AppendLine("    }");
			_ = sb.AppendLine("}");

			var sourceText = SourceText.From(sb.ToString(), Encoding.UTF8);

			ctx.AddSource($"Strings.Properties.{fileWithHash.Hash}.g.cs", sourceText);
		}

		private void AddKey(ref StringBuilder sb, string key, string? comment)
		{
			if (comment is not null)
			{
				_ = sb.AppendLine();
				_ = sb.AppendLine("        /// <summary>");
				_ = sb.AppendLine($"        /// {comment}");
				_ = sb.AppendLine("        /// </summary>");
			}

			_ = sb.AppendLine($@"        public const string {KeyNameValidator(key)} = ""{key}"";");
		}

		private IEnumerable<Tuple<string, string?>> ReadAllKeys(AdditionalText file)
		{
			return SystemIO.Path.GetExtension(file.Path) switch
			{
				".resw" => ReswParser.GetKeys(file),
				".json" => JsonParser.GetKeys(file),
				_ => []
			};
		}

		private string KeyNameValidator(string key)
		{
			return key
				.Replace('+', 'P')
				.Replace(' ', '_')
				.Replace(".", string.Empty);
		}
	}
}
