<!--  Copyright (c) 2024 Files Community. Licensed under the MIT License. See the LICENSE.  -->
<Page
	x:Class="Files.App.Views.Settings.ActionsPage"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:dataitems="using:Files.App.Data.Items"
	xmlns:helpers="using:Files.App.Helpers"
	xmlns:i="using:Microsoft.Xaml.Interactivity"
	xmlns:icore="using:Microsoft.Xaml.Interactions.Core"
	xmlns:keyboard="using:Files.App.UserControls.KeyboardShortcut"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:wctconverters="using:CommunityToolkit.WinUI.UI.Converters"
	DataContext="{x:Bind ViewModel, Mode=OneWay}"
	mc:Ignorable="d">

	<i:Interaction.Behaviors>
		<icore:EventTriggerBehavior EventName="Loaded">
			<icore:InvokeCommandAction Command="{x:Bind ViewModel.LoadCommandsCommand, Mode=OneWay}" />
		</icore:EventTriggerBehavior>
	</i:Interaction.Behaviors>

	<Page.Resources>
		<ResourceDictionary>
			<ResourceDictionary.ThemeDictionaries>
				<ResourceDictionary x:Key="Light">
					<StaticResource x:Key="OutlinedStyleBackgroundBrush" ResourceKey="ControlFillColorTransparentBrush" />
				</ResourceDictionary>
				<ResourceDictionary x:Key="Dark">
					<StaticResource x:Key="OutlinedStyleBackgroundBrush" ResourceKey="ControlFillColorSecondaryBrush" />
				</ResourceDictionary>
				<ResourceDictionary x:Key="HighContrast">
					<StaticResource x:Key="OutlinedStyleBackgroundBrush" ResourceKey="ControlFillColorTransparentBrush" />
				</ResourceDictionary>
			</ResourceDictionary.ThemeDictionaries>

			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="ms-appx:///ResourceDictionaries/RightAlignedToggleSwitchStyle.xaml" />
				<ResourceDictionary Source="ms-appx:///UserControls/KeyboardShortcut/KeyboardShortcut.xaml" />
			</ResourceDictionary.MergedDictionaries>

			<wctconverters:BoolNegationConverter x:Key="BoolNegationConverter" />
			<wctconverters:EmptyObjectToObjectConverter
				x:Key="NullToBooleanConverter"
				EmptyValue="False"
				NotEmptyValue="True" />
			<wctconverters:EmptyObjectToObjectConverter
				x:Key="NullToNegateBooleanConverter"
				EmptyValue="True"
				NotEmptyValue="False" />
			<wctconverters:BoolToVisibilityConverter
				x:Key="NegationBoolToVisibilityConverter"
				FalseValue="Visible"
				TrueValue="Collapsed" />

		</ResourceDictionary>
	</Page.Resources>

	<Grid>
		<StackPanel
			HorizontalAlignment="Stretch"
			VerticalAlignment="Stretch"
			Spacing="4">
			<StackPanel.ChildrenTransitions>
				<TransitionCollection>
					<EntranceThemeTransition />
				</TransitionCollection>
			</StackPanel.ChildrenTransitions>

			<!--  Title  -->
			<TextBlock
				Padding="0,0,0,12"
				FontSize="24"
				FontWeight="Medium"
				Text="{helpers:ResourceString Name=Actions}" />

			<!--  Subtitle  -->
			<Grid ColumnSpacing="12">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition Width="Auto" />
				</Grid.ColumnDefinitions>

				<!--  Subtitle Text  -->
				<TextBlock
					Margin="0,8,0,4"
					FontSize="16"
					FontWeight="Medium"
					Text="{helpers:ResourceString Name=Commands}" />

				<!--  Show Add New Section Button  -->
				<Button
					x:Name="ShowAddNewGridButton"
					Grid.Column="1"
					Command="{x:Bind ViewModel.ShowAddNewHotKeySectionCommand, Mode=OneWay}"
					Content="{helpers:ResourceString Name=AddCommand}"
					IsEnabled="{x:Bind ViewModel.SelectedNewShortcutItem, Converter={StaticResource NullToNegateBooleanConverter}, Mode=OneWay}" />

				<!--  Restore Defaults Button  -->
				<Button
					x:Name="RestoreDefaultsButton"
					Grid.Column="2"
					Command="{x:Bind ViewModel.ShowRestoreDefaultsConfirmationCommand, Mode=OneWay}"
					Content="{helpers:ResourceString Name=RestoreDefaults}" />
			</Grid>

			<!--  Add New  -->
			<Grid
				x:Name="CreateNewHotKeySection"
				Height="60"
				Margin="0,4,0,0"
				Padding="16,12"
				x:Load="{x:Bind ViewModel.ShowAddNewHotKeySection, Mode=OneWay}"
				Background="{ThemeResource ExpanderHeaderBackground}"
				BorderBrush="{ThemeResource ExpanderHeaderBorderBrush}"
				BorderThickness="1"
				ColumnSpacing="12"
				CornerRadius="{StaticResource ControlCornerRadius}">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" />
					<ColumnDefinition Width="32" />
					<ColumnDefinition Width="32" />
				</Grid.ColumnDefinitions>

				<!--  New Command Selector  -->
				<ComboBox
					x:Name="NewHotKeyItemPickerComboBox"
					Padding="0"
					ItemsSource="{x:Bind ViewModel.AllKeyboardShortcuts, Mode=OneWay}"
					PlaceholderText="{helpers:ResourceString Name=ChooseAnAction}"
					SelectedItem="{x:Bind ViewModel.SelectedNewShortcutItem, Mode=TwoWay}">
					<ComboBox.ItemTemplate>
						<DataTemplate x:DataType="dataitems:ModifiableCommandHotKeyItem">
							<StackPanel Width="240" HorizontalAlignment="Left">
								<TextBlock Style="{StaticResource BodyTextBlockStyle}" Text="{x:Bind Label}" />
								<TextBlock
									Foreground="{ThemeResource TextFillColorSecondaryBrush}"
									Style="{StaticResource CaptionTextBlockStyle}"
									Text="{x:Bind Description}"
									TextTrimming="CharacterEllipsis"
									TextWrapping="NoWrap" />
							</StackPanel>
						</DataTemplate>
					</ComboBox.ItemTemplate>
					<ComboBox.Resources>
						<StaticResource x:Key="ComboBoxBackground" ResourceKey="ControlFillColorTransparentBrush" />
						<StaticResource x:Key="ComboBoxBackgroundPointerOver" ResourceKey="ControlFillColorTransparentBrush" />
						<StaticResource x:Key="ComboBoxBackgroundPressed" ResourceKey="ControlFillColorTransparentBrush" />
						<StaticResource x:Key="ComboBoxBackgroundDisabled" ResourceKey="ControlFillColorTransparentBrush" />

						<StaticResource x:Key="ComboBoxBorderBrush" ResourceKey="ControlFillColorTransparentBrush" />
						<StaticResource x:Key="ComboBoxBorderBrushPointerOver" ResourceKey="ControlFillColorTransparentBrush" />
						<StaticResource x:Key="ComboBoxBorderBrushPressed" ResourceKey="ControlFillColorTransparentBrush" />
						<StaticResource x:Key="ComboBoxBorderBrushDisabled" ResourceKey="ControlFillColorTransparentBrush" />
					</ComboBox.Resources>
				</ComboBox>

				<!--  Editor (Using PreviewKeyDown to prevent Ctrl+A)  -->
				<TextBox
					x:Name="KeyboardShortcutEditorTextBox"
					Grid.Column="1"
					Width="144"
					VerticalAlignment="Center"
					IsEnabled="{x:Bind ViewModel.SelectedNewShortcutItem, Converter={StaticResource NullToBooleanConverter}, Mode=OneWay}"
					IsEnabledChanged="KeyboardShortcutEditorTextBox_IsEnabledChanged"
					IsReadOnly="True"
					IsSpellCheckEnabled="False"
					IsTabStop="True"
					PreviewKeyDown="EditorTextBox_PreviewKeyDown"
					Text="{x:Bind ViewModel.SelectedNewShortcutItem.HotKeyText, Mode=TwoWay}"
					TextAlignment="Right" />

				<!--  Add Button  -->
				<Button
					x:Name="AddButton"
					Grid.Column="2"
					Width="32"
					Height="32"
					Padding="0"
					AutomationProperties.Name="{helpers:ResourceString Name=Add}"
					Command="{x:Bind ViewModel.AddNewHotKeyCommand, Mode=OneWay}"
					IsEnabled="{x:Bind ViewModel.SelectedNewShortcutItem, Converter={StaticResource NullToBooleanConverter}, Mode=OneWay}"
					Style="{StaticResource AccentButtonStyle}"
					ToolTipService.ToolTip="{helpers:ResourceString Name=Add}">
					<FontIcon FontSize="14" Glyph="&#xE73E;" />
				</Button>

				<!--  Cancel Button  -->
				<Button
					x:Name="CancelButton"
					Grid.Column="3"
					Width="32"
					Height="32"
					Padding="0"
					AutomationProperties.Name="{helpers:ResourceString Name=Cancel}"
					Command="{x:Bind ViewModel.HideAddNewHotKeySectionCommand, Mode=OneWay}"
					ToolTipService.ToolTip="{helpers:ResourceString Name=Cancel}">
					<FontIcon FontSize="14" Glyph="&#xE711;" />
				</Button>

			</Grid>

			<!--  (Divider)  -->
			<Border
				x:Name="NewHotKeySectionDividerBorder"
				Height="1"
				Margin="0,4"
				x:Load="{x:Bind ViewModel.ShowAddNewHotKeySection, Mode=OneWay}"
				Background="{ThemeResource DividerStrokeColorDefaultBrush}" />

			<!--  List Of Available HotKeys  -->
			<ListView
				x:Name="ValidKeyboardShortcutsListView"
				ItemsSource="{x:Bind ViewModel.ValidKeyboardShortcuts, Mode=OneWay}"
				ScrollViewer.HorizontalScrollBarVisibility="Hidden"
				ScrollViewer.HorizontalScrollMode="Disabled"
				ScrollViewer.VerticalScrollBarVisibility="Hidden"
				ScrollViewer.VerticalScrollMode="Disabled"
				SelectionMode="None">
				<ListView.ItemTemplate>
					<DataTemplate x:DataType="dataitems:ModifiableCommandHotKeyItem">
						<UserControl PointerEntered="RootGrid_PointerEntered" PointerExited="RootGrid_PointerExited">
							<Grid
								x:Name="RootGrid"
								Padding="16,12"
								Background="{ThemeResource ExpanderHeaderBackground}"
								BorderBrush="{ThemeResource ExpanderHeaderBorderBrush}"
								BorderThickness="1"
								ColumnSpacing="12"
								CornerRadius="{StaticResource ControlCornerRadius}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="32" />
									<ColumnDefinition Width="32" />
									<ColumnDefinition Width="32" />
								</Grid.ColumnDefinitions>

								<!--  Title & Description  -->
								<StackPanel Spacing="2">
									<StackPanel Orientation="Horizontal" Spacing="8">
										<TextBlock
											Style="{StaticResource BodyTextBlockStyle}"
											Text="{x:Bind Label}"
											TextTrimming="CharacterEllipsis"
											TextWrapping="NoWrap" />

										<!--  TODO, decide if we want to add an indicator for custom actions  -->
										<Border
											x:Name="CustomizedIndicatorCircleBorder"
											Width="8"
											Height="8"
											x:Load="{x:Bind IsDefaultKey, Converter={StaticResource BoolNegationConverter}, Mode=OneWay}"
											Background="{ThemeResource SystemAccentColor}"
											CornerRadius="{StaticResource ControlCornerRadius}"
											ToolTipService.ToolTip="{helpers:ResourceString Name=Customized}"
											Visibility="Collapsed" />
									</StackPanel>
									<TextBlock
										Foreground="{ThemeResource TextFillColorSecondaryBrush}"
										Style="{StaticResource CaptionTextBlockStyle}"
										Text="{x:Bind Description}"
										TextTrimming="CharacterEllipsis"
										TextWrapping="NoWrap" />
								</StackPanel>

								<!--  Keyboard Shortcut Control  -->
								<keyboard:KeyboardShortcut
									x:Name="RightAlignedKeyboardShortcut"
									Grid.Column="1"
									HorizontalAlignment="Right"
									VerticalAlignment="Center"
									HotKeys="{x:Bind HotKeys, Mode=OneWay}"
									Visibility="{x:Bind IsEditMode, Converter={StaticResource NegationBoolToVisibilityConverter}, Mode=OneWay}" />

								<!--  Editor (Using PreviewKeyDown to prevent Ctrl+A)  -->
								<TextBox
									x:Name="KeyboardShortcutEditorTextBox"
									Grid.Column="1"
									Width="144"
									VerticalAlignment="Center"
									x:Load="{x:Bind IsEditMode, Mode=OneWay}"
									IsReadOnly="True"
									IsSpellCheckEnabled="False"
									IsTabStop="True"
									Loaded="KeyboardShortcutEditorTextBox_Loaded"
									PreviewKeyDown="EditorTextBox_PreviewKeyDown"
									Text="{x:Bind HotKeyText, Mode=TwoWay}"
									TextAlignment="Right" />

								<!--  Edit Button  -->
								<Button
									x:Name="EditButton"
									Grid.Column="2"
									Width="32"
									Height="32"
									Padding="0"
									x:Load="{x:Bind IsEditMode, Converter={StaticResource BoolNegationConverter}, Mode=OneWay}"
									AutomationProperties.Name="{helpers:ResourceString Name=Edit}"
									Click="EditButton_Click"
									ToolTipService.ToolTip="{helpers:ResourceString Name=Edit}"
									Visibility="Collapsed">
									<FontIcon FontSize="14" Glyph="&#xE70F;" />
								</Button>

								<!--  Save Button  -->
								<Button
									x:Name="SaveButton"
									Grid.Column="2"
									Width="32"
									Height="32"
									Padding="0"
									x:Load="{x:Bind IsEditMode, Mode=OneWay}"
									AutomationProperties.Name="{helpers:ResourceString Name=Save}"
									Click="SaveButton_Click"
									Style="{StaticResource AccentButtonStyle}"
									ToolTipService.ToolTip="{helpers:ResourceString Name=Save}">
									<FontIcon FontSize="14" Glyph="&#xE73E;" />
								</Button>

								<!--  Cancel Button  -->
								<Button
									x:Name="CancelButton"
									Grid.Column="3"
									Width="32"
									Height="32"
									Padding="0"
									x:Load="{x:Bind IsEditMode, Mode=OneWay}"
									AutomationProperties.Name="{helpers:ResourceString Name=Cancel}"
									Click="CancelButton_Click"
									IsEnabled="{x:Bind IsEditMode, Mode=OneWay}"
									ToolTipService.ToolTip="{helpers:ResourceString Name=Cancel}">
									<FontIcon FontSize="14" Glyph="&#xE711;" />
								</Button>

								<!--  Delete Button  -->
								<Button
									x:Name="DeleteButton"
									Grid.Column="4"
									Width="32"
									Height="32"
									Padding="0"
									x:Load="{x:Bind IsEditMode, Mode=OneWay}"
									AutomationProperties.Name="{helpers:ResourceString Name=Delete}"
									Click="DeleteButton_Click"
									IsEnabled="{x:Bind IsEditMode, Mode=OneWay}"
									ToolTipService.ToolTip="{helpers:ResourceString Name=Delete}">
									<FontIcon FontSize="14" Glyph="&#xE74D;" />
								</Button>

								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup x:Name="CommonStates">
										<VisualState x:Name="Normal" />
										<VisualState x:Name="PointerOver">
											<VisualState.Setters>
												<Setter Target="RootGrid.Background" Value="{ThemeResource ButtonBackgroundPointerOver}" />
												<Setter Target="RootGrid.BorderBrush" Value="{ThemeResource ButtonBorderBrushPointerOver}" />
											</VisualState.Setters>
										</VisualState>
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
							</Grid>
						</UserControl>
					</DataTemplate>
				</ListView.ItemTemplate>

				<ListView.ItemContainerStyle>
					<Style TargetType="ListViewItem">
						<Setter Property="Margin" Value="0,2" />
						<Setter Property="Padding" Value="0" />
						<Setter Property="MinHeight" Value="48" />
						<Setter Property="VerticalAlignment" Value="Center" />
						<Setter Property="HorizontalAlignment" Value="Stretch" />
						<Setter Property="HorizontalContentAlignment" Value="Stretch" />
					</Style>
				</ListView.ItemContainerStyle>

			</ListView>

		</StackPanel>

		<!--  Restore Defaults Confirmation TeachingTip  -->
		<TeachingTip
			x:Name="RestoreDefaultsConfirmationTeachingTip"
			ActionButtonCommand="{x:Bind ViewModel.RestoreDefaultsCommand, Mode=OneWay}"
			ActionButtonContent="{helpers:ResourceString Name=Yes}"
			ActionButtonStyle="{ThemeResource AccentButtonStyle}"
			CloseButtonContent="{helpers:ResourceString Name=No}"
			IsLightDismissEnabled="True"
			IsOpen="{x:Bind ViewModel.IsResetAllConfirmationTeachingTipOpened, Mode=TwoWay}"
			PreferredPlacement="BottomLeft"
			Subtitle="{helpers:ResourceString Name=RestoreDefaultKeybindingsConfirmation}"
			Target="{x:Bind RestoreDefaultsButton}" />

		<!--  Already Used TeachingTip  -->
		<TeachingTip
			x:Name="AlreadyUsedTeachingTip"
			CloseButtonContent="{helpers:ResourceString Name=OK}"
			IsLightDismissEnabled="True"
			IsOpen="{x:Bind ViewModel.IsAlreadyUsedTeachingTipOpened, Mode=TwoWay}"
			PlacementMargin="20"
			PreferredPlacement="Auto"
			Subtitle="{helpers:ResourceString Name=KeybindingAlreadyUsedNotification}" />

	</Grid>
</Page>
