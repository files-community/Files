<!--  Copyright (c) 2023 Files Community. Licensed under the MIT License. See the LICENSE.  -->
<UserControl
	x:Class="Files.App.UserControls.AddressToolbar"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:animatedvisuals="using:Microsoft.UI.Xaml.Controls.AnimatedVisuals"
	xmlns:contract8Present="http://schemas.microsoft.com/winfx/2006/xaml/presentation?IsApiContractPresent(Windows.Foundation.UniversalApiContract,8)"
	xmlns:controls="using:CommunityToolkit.WinUI.UI.Controls"
	xmlns:converters="using:Files.App.Converters"
	xmlns:converters1="using:CommunityToolkit.WinUI.UI.Converters"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:extensions="using:CommunityToolkit.WinUI.UI"
	xmlns:helpers="using:Files.App.Helpers"
	xmlns:items="using:Files.App.Data.Items"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:triggers="using:CommunityToolkit.WinUI.UI.Triggers"
	xmlns:uc="using:Files.App.UserControls"
	x:Name="NavToolbar"
	Height="50"
	d:DesignHeight="50"
	d:DesignWidth="800"
	Loading="NavToolbar_Loading"
	mc:Ignorable="d">

	<UserControl.Resources>
		<ResourceDictionary>
			<converters:NullToTrueConverter x:Key="NullToFalseConverter" Inverse="True" />
			<converters1:BoolNegationConverter x:Key="BoolNegationConverter" />

			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary>
					<SolidColorBrush x:Key="ButtonBorderBrushDisabled" Color="Transparent" />
					<SolidColorBrush x:Key="ButtonBackgroundDisabled" Color="Transparent" />

					<Style
						x:Key="AddressToolbarButtonStyle"
						BasedOn="{StaticResource DefaultButtonStyle}"
						TargetType="Button">
						<Setter Property="Padding" Value="0" />
						<Setter Property="Background" Value="Transparent" />
						<Setter Property="BorderBrush" Value="Transparent" />
						<Setter Property="Width" Value="36" />
						<Setter Property="Height" Value="32" />
					</Style>

					<Style x:Key="DefaultInfoBadgeStyle" TargetType="InfoBadge">
						<Setter Property="MinHeight" Value="{ThemeResource InfoBadgeMinHeight}" />
						<Setter Property="MinWidth" Value="{ThemeResource InfoBadgeMinWidth}" />
						<Setter Property="MaxHeight" Value="{ThemeResource InfoBadgeMaxHeight}" />
						<Setter Property="Background" Value="{ThemeResource InfoBadgeBackground}" />
						<Setter Property="Foreground" Value="{ThemeResource InfoBadgeForeground}" />
						<Setter Property="Padding" Value="{ThemeResource InfoBadgePadding}" />
						<Setter Property="IsTabStop" Value="False" />
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="InfoBadge">
									<Grid
										x:Name="RootGrid"
										Padding="{TemplateBinding Padding}"
										Background="{TemplateBinding Background}"
										CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.InfoBadgeCornerRadius}">
										<TextBlock
											x:Name="ValueTextBlock"
											HorizontalAlignment="Center"
											VerticalAlignment="Center"
											FontSize="{ThemeResource InfoBadgeValueFontSize}"
											Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Value, Mode=OneWay}"
											Visibility="Collapsed" />
										<Viewbox
											x:Name="IconPresenter"
											HorizontalAlignment="Center"
											VerticalAlignment="Stretch"
											Visibility="Collapsed">
											<IconSourceElement IconSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IconSource, Mode=OneWay}" />
										</Viewbox>
										<VisualStateManager.VisualStateGroups>
											<VisualStateGroup x:Name="DisplayKindStates">
												<VisualState x:Name="Dot" />
												<VisualState x:Name="Icon">
													<VisualState.Setters>
														<Setter Target="IconPresenter.Visibility" Value="Visible" />
														<Setter Target="IconPresenter.Margin" Value="{ThemeResource IconInfoBadgeIconMargin}" />
													</VisualState.Setters>
												</VisualState>
												<VisualState x:Name="FontIcon">
													<VisualState.Setters>
														<Setter Target="IconPresenter.Visibility" Value="Visible" />
														<Setter Target="IconPresenter.Margin" Value="{ThemeResource IconInfoBadgeFontIconMargin}" />
													</VisualState.Setters>
												</VisualState>
												<VisualState x:Name="Value">
													<VisualState.Setters>
														<Setter Target="ValueTextBlock.Visibility" Value="Visible" />
														<Setter Target="ValueTextBlock.Margin" Value="{ThemeResource ValueInfoBadgeTextMargin}" />
													</VisualState.Setters>
												</VisualState>
											</VisualStateGroup>
										</VisualStateManager.VisualStateGroups>
									</Grid>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>
					<Style
						x:Key="AttentionDotInfoBadgeStyle"
						BasedOn="{StaticResource DefaultInfoBadgeStyle}"
						TargetType="InfoBadge">
						<Setter Property="Background" Value="{ThemeResource SystemFillColorAttentionBrush}" />
					</Style>
					<Style
						x:Key="AttentionValueInfoBadgeStyle"
						BasedOn="{StaticResource AttentionDotInfoBadgeStyle}"
						TargetType="InfoBadge" />
					<Style
						x:Key="AttentionIconInfoBadgeStyle"
						BasedOn="{StaticResource AttentionDotInfoBadgeStyle}"
						TargetType="InfoBadge">
						<Setter Property="Padding" Value="0,4,0,2" />
						<Setter Property="IconSource">
							<Setter.Value>
								<FontIconSource Glyph="&#xEA38;" />
							</Setter.Value>
						</Setter>
					</Style>
					<Style
						x:Key="InformationalDotInfoBadgeStyle"
						BasedOn="{StaticResource DefaultInfoBadgeStyle}"
						TargetType="InfoBadge">
						<Setter Property="Background" Value="{ThemeResource SystemFillColorSolidNeutralBrush}" />
					</Style>
					<Style
						x:Key="InformationalValueInfoBadgeStyle"
						BasedOn="{StaticResource InformationalDotInfoBadgeStyle}"
						TargetType="InfoBadge" />
					<Style
						x:Key="InformationalIconInfoBadgeStyle"
						BasedOn="{StaticResource InformationalDotInfoBadgeStyle}"
						TargetType="InfoBadge">
						<Setter Property="Padding" Value="0,4,0,2" />
						<Setter Property="IconSource">
							<Setter.Value>
								<FontIconSource Glyph="&#xF13F;" />
							</Setter.Value>
						</Setter>
					</Style>
					<Style
						x:Key="SuccessDotInfoBadgeStyle"
						BasedOn="{StaticResource DefaultInfoBadgeStyle}"
						TargetType="InfoBadge">
						<Setter Property="Background" Value="{ThemeResource SystemFillColorSuccessBrush}" />
					</Style>
					<Style
						x:Key="SuccessValueInfoBadgeStyle"
						BasedOn="{StaticResource SuccessDotInfoBadgeStyle}"
						TargetType="InfoBadge" />
					<Style
						x:Key="SuccessIconInfoBadgeStyle"
						BasedOn="{StaticResource SuccessDotInfoBadgeStyle}"
						TargetType="InfoBadge">
						<Setter Property="IconSource">
							<Setter.Value>
								<SymbolIconSource Symbol="Accept" />
							</Setter.Value>
						</Setter>
					</Style>
					<Style
						x:Key="CautionDotInfoBadgeStyle"
						BasedOn="{StaticResource DefaultInfoBadgeStyle}"
						TargetType="InfoBadge">
						<Setter Property="Background" Value="{ThemeResource SystemFillColorCautionBrush}" />
					</Style>
					<Style
						x:Key="CautionValueInfoBadgeStyle"
						BasedOn="{StaticResource CautionDotInfoBadgeStyle}"
						TargetType="InfoBadge" />
					<Style
						x:Key="CautionIconInfoBadgeStyle"
						BasedOn="{StaticResource CautionDotInfoBadgeStyle}"
						TargetType="InfoBadge">
						<Setter Property="IconSource">
							<Setter.Value>
								<SymbolIconSource Symbol="Important" />
							</Setter.Value>
						</Setter>
					</Style>
					<Style
						x:Key="CriticalDotInfoBadgeStyle"
						BasedOn="{StaticResource DefaultInfoBadgeStyle}"
						TargetType="InfoBadge">
						<Setter Property="Background" Value="{ThemeResource SystemFillColorCriticalBrush}" />
					</Style>
					<Style
						x:Key="CriticalValueInfoBadgeStyle"
						BasedOn="{StaticResource CriticalDotInfoBadgeStyle}"
						TargetType="InfoBadge" />
					<Style
						x:Key="CriticalIconInfoBadgeStyle"
						BasedOn="{StaticResource CriticalDotInfoBadgeStyle}"
						TargetType="InfoBadge">
						<Setter Property="IconSource">
							<Setter.Value>
								<SymbolIconSource Symbol="Cancel" />
							</Setter.Value>
						</Setter>
					</Style>
				</ResourceDictionary>
			</ResourceDictionary.MergedDictionaries>
		</ResourceDictionary>
	</UserControl.Resources>

	<Grid x:Name="RootGrid" Background="{ThemeResource App.Theme.AddressBar.BackgroundBrush}">
		<Grid Padding="8" ColumnSpacing="4">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>

			<!--  Page Navigation Actions  -->
			<StackPanel
				Grid.Row="1"
				Orientation="Horizontal"
				Spacing="4">
				<Button
					x:Name="Back"
					x:FieldModifier="public"
					AccessKey="B"
					AutomationProperties.FullDescription="{x:Bind ViewModel.Commands.NavigateBack.Description, Mode=OneWay}"
					AutomationProperties.Name="{x:Bind ViewModel.Commands.NavigateBack.Label, Mode=OneWay}"
					Command="{x:Bind ViewModel.Commands.NavigateBack, Mode=OneWay}"
					IsEnabled="{x:Bind ViewModel.Commands.NavigateBack.IsExecutable, Mode=OneWay}"
					Style="{StaticResource AddressToolbarButtonStyle}"
					ToolTipService.ToolTip="{x:Bind ViewModel.Commands.NavigateBack.LabelWithHotKey, Mode=OneWay}">
					<FontIcon FontSize="14" Glyph="{x:Bind ViewModel.Commands.NavigateBack.Glyph.BaseGlyph, Mode=OneWay}" />
				</Button>

				<Button
					x:Name="Forward"
					x:FieldModifier="public"
					AccessKey="F"
					AutomationProperties.FullDescription="{x:Bind ViewModel.Commands.NavigateForward.Description, Mode=OneWay}"
					AutomationProperties.Name="{x:Bind ViewModel.Commands.NavigateForward.Label, Mode=OneWay}"
					Command="{x:Bind ViewModel.Commands.NavigateForward, Mode=OneWay}"
					IsEnabled="{x:Bind ViewModel.Commands.NavigateForward.IsExecutable, Mode=OneWay}"
					Style="{StaticResource AddressToolbarButtonStyle}"
					ToolTipService.ToolTip="{x:Bind ViewModel.Commands.NavigateForward.LabelWithHotKey, Mode=OneWay}">
					<FontIcon FontSize="14" Glyph="{x:Bind ViewModel.Commands.NavigateForward.Glyph.BaseGlyph, Mode=OneWay}" />
				</Button>

				<Button
					x:Name="Up"
					x:FieldModifier="public"
					AccessKey="U"
					AutomationProperties.FullDescription="{x:Bind ViewModel.Commands.NavigateUp.Description, Mode=OneWay}"
					AutomationProperties.Name="{x:Bind ViewModel.Commands.NavigateUp.Label, Mode=OneWay}"
					Command="{x:Bind ViewModel.Commands.NavigateUp, Mode=OneWay}"
					IsEnabled="{x:Bind ViewModel.Commands.NavigateUp.IsExecutable, Mode=OneWay}"
					Style="{StaticResource AddressToolbarButtonStyle}"
					ToolTipService.ToolTip="{x:Bind ViewModel.Commands.NavigateUp.LabelWithHotKey, Mode=OneWay}">
					<FontIcon FontSize="14" Glyph="{x:Bind ViewModel.Commands.NavigateUp.Glyph.BaseGlyph, Mode=OneWay}" />
				</Button>

				<Button
					x:Name="Refresh"
					x:FieldModifier="public"
					AccessKey="R"
					AutomationProperties.Name="{x:Bind Commands.RefreshItems.Label}"
					Command="{x:Bind Commands.RefreshItems, Mode=OneWay}"
					IsEnabled="{x:Bind Commands.RefreshItems.IsExecutable, Mode=OneWay}"
					Style="{StaticResource AddressToolbarButtonStyle}"
					ToolTipService.ToolTip="{x:Bind Commands.RefreshItems.LabelWithHotKey, Mode=OneWay}">
					<FontIcon FontSize="14" Glyph="{x:Bind Commands.RefreshItems.Glyph.BaseGlyph}" />
				</Button>
			</StackPanel>

			<!--  Path Box  -->
			<AutoSuggestBox
				x:Name="VisiblePath"
				Grid.Column="1"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Center"
				x:Load="{x:Bind ViewModel.ManualEntryBoxLoaded, Mode=OneWay}"
				BorderBrush="{ThemeResource SystemBaseMediumLowColor}"
				BorderThickness="{ThemeResource TextControlBorderThemeThickness}"
				CornerRadius="{StaticResource ControlCornerRadius}"
				FocusDisengaged="VisiblePath_LostFocus"
				FontWeight="SemiBold"
				ItemsSource="{x:Bind ViewModel.NavigationBarSuggestions, Mode=OneWay}"
				Loaded="VisiblePath_Loaded"
				LostFocus="VisiblePath_LostFocus"
				PlaceholderText="{helpers:ResourceString Name=NavigationToolbarVisiblePath/PlaceholderText}"
				PreviewKeyDown="VisiblePath_KeyDown"
				QuerySubmitted="VisiblePath_QuerySubmitted"
				ScrollViewer.HorizontalScrollBarVisibility="Auto"
				ScrollViewer.VerticalScrollBarVisibility="Hidden"
				Text="{x:Bind ViewModel.PathText, Mode=OneWay}"
				TextChanged="{x:Bind ViewModel.VisiblePath_TextChanged, Mode=OneWay}"
				TextMemberPath="Text"
				Visibility="{x:Bind converters:MultiBooleanConverter.OrNotConvertToVisibility(ShowSearchBox, ViewModel.IsSearchBoxVisible), Mode=OneWay}">
				<AutoSuggestBox.ItemTemplate>
					<DataTemplate x:DataType="items:NavigationBarSuggestionItem">
						<StackPanel Margin="0,4">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>

								<!--  Primary Display  -->
								<!--  This is used to display paths or command descriptions.  -->
								<TextBlock Grid.Column="0" Foreground="{ThemeResource TextFillColorPrimaryBrush}">
									<Run FontWeight="Normal" Text="{x:Bind PrimaryDisplayPreMatched, Mode=OneWay}" /><Run FontWeight="Bold" Text="{x:Bind PrimaryDisplayMatched, Mode=OneWay}" /><Run FontWeight="Normal" Text="{x:Bind PrimaryDisplayPostMatched, Mode=OneWay}" />
								</TextBlock>

								<!--  Supplementary Display  -->
								<!--  This is used to display command hotkeys.  -->
								<TextBlock
									Grid.Column="1"
									FontWeight="Normal"
									Foreground="{ThemeResource TextFillColorTertiaryBrush}"
									Text="{x:Bind SupplementaryDisplay, Mode=OneWay}" />
							</Grid>

							<!--  Secondary Display  -->
							<TextBlock
								x:Name="SecondaryDisplayBlock"
								x:Load="{x:Bind SecondaryDisplay, Mode=OneWay, Converter={StaticResource NullToFalseConverter}}"
								FontWeight="Normal"
								Foreground="{ThemeResource TextFillColorSecondaryBrush}"
								Text="{x:Bind SecondaryDisplay, Mode=OneWay}" />
						</StackPanel>
					</DataTemplate>
				</AutoSuggestBox.ItemTemplate>
			</AutoSuggestBox>

			<!--  Path Breadcrumb Bar  -->
			<Grid
				x:Name="ClickablePath"
				Grid.Column="1"
				MinHeight="33"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Center"
				extensions:FrameworkElementExtensions.Cursor="Hand"
				x:Load="{x:Bind ViewModel.ClickablePathLoaded, Mode=OneWay}"
				Background="{ThemeResource TextControlBackground}"
				BorderBrush="{ThemeResource ControlElevationBorderBrush}"
				BorderThickness="1"
				CornerRadius="{StaticResource ControlCornerRadius}"
				PointerPressed="ManualPathEntryItem_Click"
				Visibility="{x:Bind converters:MultiBooleanConverter.OrNotConvertToVisibility(ShowSearchBox, ViewModel.IsSearchBoxVisible), Mode=OneWay}">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" />
				</Grid.ColumnDefinitions>
				<uc:PathBreadcrumb
					Grid.Column="0"
					VerticalAlignment="Stretch"
					HorizontalContentAlignment="Stretch"
					VerticalContentAlignment="Stretch"
					ViewModel="{x:Bind ViewModel, Mode=OneWay}" />
				<FontIcon
					Grid.Column="1"
					Margin="12"
					FontSize="16"
					Glyph="&#xE70D;" />
			</Grid>

			<!--  Storage Search Box  -->
			<uc:SearchBox
				x:Name="SearchRegion"
				Grid.Column="2"
				Width="240"
				Height="34"
				HorizontalAlignment="Stretch"
				VerticalAlignment="Center"
				AccessKey="K"
				AccessKeyInvoked="SearchRegion_AccessKeyInvoked"
				Canvas.ZIndex="100"
				CornerRadius="{StaticResource ControlCornerRadius}"
				GotFocus="SearchRegion_OnGotFocus"
				LostFocus="SearchRegion_LostFocus"
				SearchBoxViewModel="{x:Bind ViewModel.SearchBoxViewModel, Mode=OneWay}"
				Visibility="{x:Bind converters:MultiBooleanConverter.OrConvertToVisibility(ShowSearchBox, ViewModel.IsSearchBoxVisible), Mode=OneWay}" />

			<!--  Right Side Action Buttons  -->
			<StackPanel Grid.Column="3" Orientation="Horizontal">

				<!--  Mini Search Button  -->
				<Button
					x:Name="ShowSearchButton"
					AccessKey="I"
					AutomationProperties.Name="{x:Bind ViewModel.Commands.Search.Label}"
					Command="{x:Bind ViewModel.Commands.Search, Mode=OneWay}"
					IsEnabled="{x:Bind ViewModel.Commands.Search.IsExecutable}"
					Style="{StaticResource AddressToolbarButtonStyle}"
					ToolTipService.ToolTip="{x:Bind ViewModel.Commands.Search.LabelWithHotKey, Mode=OneWay}"
					Visibility="Collapsed">
					<FontIcon FontSize="14" Glyph="{x:Bind ViewModel.SearchButtonGlyph, Mode=OneWay}" />
				</Button>

				<!--  Status Center  -->
				<Button
					x:Name="ShowStatusCenterButton"
					Padding="0"
					AccessKey="T"
					AutomationProperties.Name="{helpers:ResourceString Name=StatusCenter}"
					Style="{StaticResource AddressToolbarButtonStyle}"
					ToolTipService.ToolTip="{helpers:ResourceString Name=StatusCenter}"
					Visibility="{x:Bind OngoingTasksViewModel.HasAnyItem, Mode=OneWay}">

					<Grid Margin="-16">

						<!-- Enable icon again if we add option to always display on the toolbar
						<uc:OpacityIcon
							x:Name="StatusCenterIcon"
							Width="16"
							Height="16"
							x:Load="{x:Bind OngoingTasksViewModel.HasAnyItemInProgress, Converter={StaticResource BoolNegationConverter}, Mode=OneWay}"
							Style="{StaticResource ColorIconStatusCenter}" />-->

						<ProgressRing
							x:Name="MedianOperationProgressRing"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							x:Load="{x:Bind OngoingTasksViewModel.HasAnyItemInProgress, Mode=OneWay}"
							Background="{ThemeResource SubtleFillColorSecondaryBrush}"
							IsIndeterminate="False"
							Value="{x:Bind OngoingTasksViewModel.AverageOperationProgressValue, Mode=OneWay}" />

						<InfoBadge
							x:Name="StatusInfoBadge"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							Value="{x:Bind OngoingTasksViewModel.InfoBadgeValue, Mode=OneWay}" />

					</Grid>

					<Button.Flyout>
						<Flyout
							contract8Present:ShouldConstrainToRootBounds="False"
							AutomationProperties.Name="{helpers:ResourceString Name=StatusCenter}"
							Placement="BottomEdgeAlignedRight">
							<Flyout.FlyoutPresenterStyle>
								<Style TargetType="FlyoutPresenter">
									<Setter Property="Padding" Value="0" />
									<Setter Property="CornerRadius" Value="{StaticResource OverlayCornerRadius}" />
								</Style>
							</Flyout.FlyoutPresenterStyle>

							<uc:StatusCenter
								x:Name="OngoingTasksControl"
								Width="400"
								MinHeight="300"
								MaxHeight="500"
								x:FieldModifier="public"
								IsTabStop="True" />
						</Flyout>
					</Button.Flyout>

				</Button>

				<!--  Update The Files App Button When An Update Available  -->
				<Button
					x:Name="UpdateAppButton"
					HorizontalContentAlignment="Stretch"
					VerticalContentAlignment="Stretch"
					x:Load="{x:Bind ViewModel.IsUpdateAvailable, Mode=OneWay}"
					AccessKey="1"
					AutomationProperties.Name="{helpers:ResourceString Name=UpdateFiles}"
					Command="{x:Bind ViewModel.UpdateCommand, Mode=OneWay}"
					IsEnabled="{x:Bind ViewModel.IsUpdating, Mode=OneWay, Converter={StaticResource BoolNegationConverter}}"
					Style="{StaticResource AddressToolbarButtonStyle}"
					ToolTipService.ToolTip="{helpers:ResourceString Name=UpdateFiles}">
					<Grid>
						<!--  Icon  -->
						<FontIcon
							x:Name="UpdateIcon"
							x:Load="{x:Bind ViewModel.IsUpdating, Mode=OneWay, Converter={StaticResource BoolNegationConverter}}"
							FontSize="14"
							Foreground="{ThemeResource SystemAccentColor}"
							Glyph="&#xE896;" />

						<!--  Progress  -->
						<ProgressRing
							x:Name="UpdateProgressRing"
							Width="20"
							Height="20"
							x:Load="{x:Bind ViewModel.IsUpdating, Mode=OneWay}"
							IsIndeterminate="True" />
					</Grid>
				</Button>

				<!--  Show The Latest Version Release Note  -->
				<Button
					x:Name="ShowReleaseNotesButton"
					HorizontalContentAlignment="Stretch"
					VerticalContentAlignment="Stretch"
					x:Load="{x:Bind ViewModel.IsReleaseNotesVisible, Mode=OneWay}"
					AccessKey="2"
					AutomationProperties.Name="{helpers:ResourceString Name=WhatsNew}"
					Command="{x:Bind ViewModel.ViewReleaseNotesAsyncCommand, Mode=OneWay}"
					Style="{StaticResource AddressToolbarButtonStyle}"
					ToolTipService.ToolTip="{helpers:ResourceString Name=WhatsNew}">
					<FontIcon
						FontSize="14"
						Foreground="{ThemeResource SystemAccentColor}"
						Glyph="&#xF133;" />
				</Button>

				<!--  Show The Files App Settings Dialog  -->
				<Button
					x:Name="SettingsButton"
					AccessKey="I"
					AutomationProperties.AutomationId="SettingsButton"
					AutomationProperties.Name="{x:Bind ViewModel.Commands.OpenSettings.Label, Mode=OneWay}"
					Command="{x:Bind ViewModel.Commands.OpenSettings, Mode=OneWay}"
					Style="{StaticResource AddressToolbarButtonStyle}"
					ToolTipService.Placement="Bottom"
					ToolTipService.ToolTip="{x:Bind ViewModel.Commands.OpenSettings.LabelWithHotKey, Mode=OneWay}"
					Visibility="{x:Bind ShowSettingsButton, Mode=OneWay}">
					<AnimatedIcon x:Name="SettingAnimatedIcon" Height="16">
						<AnimatedIcon.Source>
							<animatedvisuals:AnimatedSettingsVisualSource />
						</AnimatedIcon.Source>
						<AnimatedIcon.FallbackIconSource>
							<SymbolIconSource Symbol="Setting" />
						</AnimatedIcon.FallbackIconSource>
					</AnimatedIcon>
				</Button>

			</StackPanel>

			<!--  Status Center TeachingTip  -->
			<TeachingTip
				x:Name="StatusCenterTeachingTip"
				Title="{helpers:ResourceString Name=OngoingTasksTeachingTip/Title}"
				IsOpen="False"
				Subtitle="{helpers:ResourceString Name=OngoingTasksTeachingTip/Subtitle}"
				Target="{x:Bind ShowStatusCenterButton}" />
		</Grid>

		<VisualStateManager.VisualStateGroups>
			<VisualStateGroup>
				<VisualState x:Name="SearchBoxAlwaysShown">
					<VisualState.StateTriggers>
						<triggers:IsEqualStateTrigger Value="{x:Bind ShowSearchBox, Mode=OneWay}" To="True" />
					</VisualState.StateTriggers>
				</VisualState>

				<VisualState x:Name="SearchBoxCollapse">
					<VisualState.StateTriggers>
						<triggers:IsEqualStateTrigger Value="{x:Bind ShowSearchBox, Mode=OneWay}" To="False" />
					</VisualState.StateTriggers>
					<VisualState.Setters>
						<Setter Target="ShowSearchButton.Visibility" Value="Visible" />
						<Setter Target="SearchRegion.(Grid.Column)" Value="1" />
						<Setter Target="SearchRegion.Width" Value="NaN" />
					</VisualState.Setters>
				</VisualState>
			</VisualStateGroup>
			<VisualStateGroup>
				<VisualState x:Name="TasksSuccess">
					<VisualState.StateTriggers>
						<triggers:CompareStateTrigger
							Comparison="Equal"
							Value="{x:Bind OngoingTasksViewModel.InfoBadgeState, Mode=OneWay}"
							To="0" />
					</VisualState.StateTriggers>
					<VisualState.Setters>
						<Setter Target="StatusInfoBadge.Style" Value="{StaticResource SuccessIconInfoBadgeStyle}" />
					</VisualState.Setters>
				</VisualState>
				<VisualState x:Name="TasksOnging">
					<VisualState.StateTriggers>
						<triggers:CompareStateTrigger
							Comparison="Equal"
							Value="{x:Bind OngoingTasksViewModel.InfoBadgeState, Mode=OneWay}"
							To="1" />
					</VisualState.StateTriggers>
					<VisualState.Setters>
						<Setter Target="StatusInfoBadge.Style" Value="{StaticResource AttentionValueInfoBadgeStyle}" />
					</VisualState.Setters>
				</VisualState>
				<VisualState x:Name="TasksFailure">
					<VisualState.StateTriggers>
						<triggers:CompareStateTrigger
							Comparison="Equal"
							Value="{x:Bind OngoingTasksViewModel.InfoBadgeState, Mode=OneWay}"
							To="2" />
					</VisualState.StateTriggers>
					<VisualState.Setters>
						<Setter Target="StatusInfoBadge.Style" Value="{StaticResource CriticalValueInfoBadgeStyle}" />
					</VisualState.Setters>
				</VisualState>
				<VisualState x:Name="TasksCompletionWithFailure">
					<VisualState.StateTriggers>
						<triggers:CompareStateTrigger
							Comparison="Equal"
							Value="{x:Bind OngoingTasksViewModel.InfoBadgeState, Mode=OneWay}"
							To="3" />
					</VisualState.StateTriggers>
					<VisualState.Setters>
						<Setter Target="StatusInfoBadge.Style" Value="{StaticResource CriticalIconInfoBadgeStyle}" />
					</VisualState.Setters>
				</VisualState>
			</VisualStateGroup>
		</VisualStateManager.VisualStateGroups>
	</Grid>

</UserControl>