<!--  Copyright (c) 2023 Files Community. Licensed under the MIT License. See the LICENSE.  -->
<UserControl
	x:Class="Files.App.UserControls.StatusCenter"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:animatedvisuals="using:Microsoft.UI.Xaml.Controls.AnimatedVisuals"
	xmlns:converters="using:Files.App.Converters"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:helpers="using:Files.App.Helpers"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:statuscenter="using:Files.App.Utils.StatusCenter"
	xmlns:uc="using:Files.App.UserControls"
	xmlns:wctconverters="using:CommunityToolkit.WinUI.UI.Converters"
	xmlns:wcttriggers="using:CommunityToolkit.WinUI.UI.Triggers"
	mc:Ignorable="d">

	<UserControl.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary>
					<Style x:Key="CustomProgressBarStyle" TargetType="ProgressBar">
						<Setter Property="Foreground" Value="{ThemeResource ProgressBarForeground}" />
						<Setter Property="Background" Value="{ThemeResource ProgressBarBackground}" />
						<Setter Property="BorderThickness" Value="{ThemeResource ProgressBarBorderThemeThickness}" />
						<Setter Property="BorderBrush" Value="{ThemeResource ProgressBarBorderBrush}" />
						<Setter Property="MinHeight" Value="{StaticResource ProgressBarMinHeight}" />
						<Setter Property="Maximum" Value="100" />
						<Setter Property="IsTabStop" Value="False" />
						<Setter Property="VerticalAlignment" Value="Center" />
						<Setter Property="CornerRadius" Value="{StaticResource ProgressBarCornerRadius}" />
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="ProgressBar">
									<Grid x:Name="LayoutRoot">
										<Border
											x:Name="ProgressBarRoot"
											Padding="{TemplateBinding Padding}"
											BorderBrush="{TemplateBinding BorderBrush}"
											BorderThickness="{TemplateBinding BorderThickness}"
											CornerRadius="{TemplateBinding CornerRadius}">

											<Border Clip="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ClipRect}">
												<Grid Height="{TemplateBinding MinHeight}">

													<!--<Rectangle
														x:Name="ProgressBarTrack"
														Width="{TemplateBinding Width}"
														Height="{ThemeResource ProgressBarTrackHeight}"
														VerticalAlignment="Center"
														Fill="{TemplateBinding Background}"
														RadiusX="{Binding Source={StaticResource ProgressBarTrackCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}"
														RadiusY="{Binding Source={StaticResource ProgressBarTrackCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}">
														<Rectangle.RenderTransform>
															<CompositeTransform />
														</Rectangle.RenderTransform>
													</Rectangle>-->

													<Rectangle
														x:Name="DeterminateProgressBarIndicator"
														HorizontalAlignment="Left"
														Fill="{TemplateBinding Foreground}"
														Opacity="0.1"
														RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}"
														RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />

													<Rectangle
														x:Name="IndeterminateProgressBarIndicator"
														HorizontalAlignment="Left"
														Fill="{TemplateBinding Foreground}"
														Opacity="0"
														RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}"
														RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}">
														<Rectangle.RenderTransform>
															<CompositeTransform />
														</Rectangle.RenderTransform>
													</Rectangle>

													<Rectangle
														x:Name="IndeterminateProgressBarIndicator2"
														HorizontalAlignment="Left"
														Fill="{TemplateBinding Foreground}"
														Opacity="0"
														RadiusX="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}"
														RadiusY="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}">
														<Rectangle.RenderTransform>
															<CompositeTransform />
														</Rectangle.RenderTransform>
													</Rectangle>
												</Grid>
											</Border>
										</Border>

										<VisualStateManager.VisualStateGroups>
											<VisualStateGroup x:Name="CommonStates">

												<VisualStateGroup.Transitions>
													<VisualTransition From="Updating" To="Determinate">
														<Storyboard>
															<RepositionThemeAnimation FromHorizontalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.IndicatorLengthDelta}" TargetName="DeterminateProgressBarIndicator" />
														</Storyboard>
													</VisualTransition>
													<VisualTransition From="UpdatingError" To="Error">
														<Storyboard>
															<RepositionThemeAnimation FromHorizontalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.IndicatorLengthDelta}" TargetName="DeterminateProgressBarIndicator" />
														</Storyboard>
													</VisualTransition>
													<VisualTransition From="Paused" To="Determinate">
														<Storyboard>
															<ColorAnimation
																Storyboard.TargetName="DeterminateProgressBarIndicator"
																Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
																To="{TemplateBinding Foreground}"
																Duration="0:0:0.167" />
														</Storyboard>
													</VisualTransition>
													<VisualTransition From="Error" To="Determinate">
														<Storyboard>
															<ColorAnimation
																Storyboard.TargetName="DeterminateProgressBarIndicator"
																Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
																To="{TemplateBinding Foreground}"
																Duration="0:0:0.167" />
														</Storyboard>
													</VisualTransition>
													<VisualTransition From="Indeterminate" To="Determinate">
														<Storyboard>
															<FadeInThemeAnimation TargetName="IndeterminateProgressBarIndicator" />
															<FadeInThemeAnimation TargetName="IndeterminateProgressBarIndicator2" />
															<FadeInThemeAnimation TargetName="ProgressBarTrack" />
														</Storyboard>
													</VisualTransition>
													<VisualTransition From="IndeterminatePaused" To="Indeterminate">
														<Storyboard>
															<DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator" Storyboard.TargetProperty="Opacity">
																<DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
															</DoubleAnimationUsingKeyFrames>
															<DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator2" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
																<SplineDoubleKeyFrame
																	KeySpline="1.0, 0.0, 1.0, 1.0"
																	KeyTime="0:0:0.333"
																	Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationEndPosition}" />
															</DoubleAnimationUsingKeyFrames>
															<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ProgressBarTrack" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
																<SplineDoubleKeyFrame
																	KeySpline="1.0, 0.0, 1.0, 1.0"
																	KeyTime="0:0:0"
																	Value="0" />
																<SplineDoubleKeyFrame
																	KeySpline="1.0, 0.0, 1.0, 1.0"
																	KeyTime="0:0:0.5"
																	Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationEndPosition}" />
															</DoubleAnimationUsingKeyFrames>
														</Storyboard>
													</VisualTransition>
													<VisualTransition From="IndeterminateError" To="Indeterminate">
														<Storyboard>
															<DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator" Storyboard.TargetProperty="Opacity">
																<DiscreteDoubleKeyFrame KeyTime="0" Value="0" />
															</DoubleAnimationUsingKeyFrames>
															<DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator2" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
																<SplineDoubleKeyFrame
																	KeySpline="1.0, 0.0, 1.0, 1.0"
																	KeyTime="0:0:0.333"
																	Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationEndPosition}" />
															</DoubleAnimationUsingKeyFrames>
															<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ProgressBarTrack" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
																<SplineDoubleKeyFrame
																	KeySpline="1.0, 0.0, 1.0, 1.0"
																	KeyTime="0:0:0"
																	Value="0" />
																<SplineDoubleKeyFrame
																	KeySpline="1.0, 0.0, 1.0, 1.0"
																	KeyTime="0:0:0.5"
																	Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationEndPosition}" />
															</DoubleAnimationUsingKeyFrames>
														</Storyboard>
													</VisualTransition>
												</VisualStateGroup.Transitions>

												<VisualState x:Name="Normal" />
												<VisualState x:Name="Determinate" />
												<VisualState x:Name="Updating" />
												<VisualState x:Name="UpdatingError">
													<VisualState.Setters>
														<Setter Target="DeterminateProgressBarIndicator.(Shape.Fill).(SolidColorBrush.Color)" Value="{ThemeResource ProgressBarErrorForegroundColor}" />
													</VisualState.Setters>
												</VisualState>

												<VisualState x:Name="Error">
													<Storyboard>
														<ColorAnimation
															Storyboard.TargetName="DeterminateProgressBarIndicator"
															Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
															To="{ThemeResource ProgressBarErrorForegroundColor}"
															Duration="0:0:0.167" />
													</Storyboard>
												</VisualState>

												<VisualState x:Name="Paused">
													<Storyboard>
														<ColorAnimation
															Storyboard.TargetName="DeterminateProgressBarIndicator"
															Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
															To="{ThemeResource ProgressBarPausedForegroundColor}"
															Duration="0:0:0.167" />
													</Storyboard>
												</VisualState>

												<VisualState x:Name="Indeterminate">
													<VisualState.Setters>
														<Setter Target="IndeterminateProgressBarIndicator.Opacity" Value="1" />
														<Setter Target="IndeterminateProgressBarIndicator2.Opacity" Value="1" />
														<Setter Target="ProgressBarTrack.Opacity" Value="0" />
													</VisualState.Setters>
													<Storyboard RepeatBehavior="Forever">
														<DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
															<DiscreteDoubleKeyFrame KeyTime="0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationStartPosition}" />
															<SplineDoubleKeyFrame
																KeySpline="0.4, 0.0, 0.6, 1.0"
																KeyTime="0:0:1.5"
																Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationEndPosition}" />
															<DiscreteDoubleKeyFrame KeyTime="0:0:2" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationEndPosition}" />
														</DoubleAnimationUsingKeyFrames>
														<DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator2" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
															<DiscreteDoubleKeyFrame KeyTime="0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationStartPosition}" />
															<DiscreteDoubleKeyFrame KeyTime="0:0:0.75" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationStartPosition}" />
															<SplineDoubleKeyFrame
																KeySpline="0.4, 0.0, 0.6, 1.0"
																KeyTime="0:0:2"
																Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationEndPosition}" />
														</DoubleAnimationUsingKeyFrames>
													</Storyboard>
												</VisualState>

												<VisualState x:Name="IndeterminateError">
													<VisualState.Setters>
														<Setter Target="IndeterminateProgressBarIndicator.Opacity" Value="0" />
														<Setter Target="DeterminateProgressBarIndicator.Opacity" Value="0" />
														<Setter Target="IndeterminateProgressBarIndicator2.Opacity" Value="1" />
														<Setter Target="ProgressBarTrack.Opacity" Value="0" />
													</VisualState.Setters>
													<Storyboard>
														<DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator2" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
															<SplineDoubleKeyFrame
																KeySpline="1.0, 1.0, 0.0, 1.0"
																KeyTime="0:0:0.167"
																Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationEndPosition}" />
															<SplineDoubleKeyFrame
																KeySpline="1.0, 1.0, 0.0, 1.0"
																KeyTime="0:0:0.167"
																Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationStartPosition}" />
															<SplineDoubleKeyFrame
																KeySpline="0.0, 0.0, 0.0, 1.0"
																KeyTime="0:0:0.75"
																Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationMidPosition}" />
														</DoubleAnimationUsingKeyFrames>
														<ColorAnimation
															Storyboard.TargetName="IndeterminateProgressBarIndicator2"
															Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
															To="{ThemeResource ProgressBarErrorForegroundColor}"
															Duration="0:0:0.167" />
														<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ProgressBarTrack" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
															<SplineDoubleKeyFrame
																KeySpline="0.0, 0.0, 0.0, 1.0"
																KeyTime="0:0:0"
																Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationStartPosition}" />
															<SplineDoubleKeyFrame
																KeySpline="0.0, 0.0, 0.0, 1.0"
																KeyTime="0:0:0.75"
																Value="0" />
														</DoubleAnimationUsingKeyFrames>
													</Storyboard>
												</VisualState>

												<VisualState x:Name="IndeterminatePaused">
													<VisualState.Setters>
														<Setter Target="IndeterminateProgressBarIndicator.Opacity" Value="0" />
														<Setter Target="DeterminateProgressBarIndicator.Opacity" Value="0" />
														<Setter Target="IndeterminateProgressBarIndicator2.Opacity" Value="1" />
														<Setter Target="ProgressBarTrack.Opacity" Value="0" />
													</VisualState.Setters>
													<Storyboard>
														<DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator2" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
															<SplineDoubleKeyFrame
																KeySpline="1.0, 1.0, 0.0, 1.0"
																KeyTime="0:0:0.167"
																Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationEndPosition}" />
															<SplineDoubleKeyFrame
																KeySpline="1.0, 1.0, 0.0, 1.0"
																KeyTime="0:0:0.167"
																Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationStartPosition}" />
															<SplineDoubleKeyFrame
																KeySpline="0.0, 0.0, 0.0, 1.0"
																KeyTime="0:0:0.75"
																Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationMidPosition}" />
														</DoubleAnimationUsingKeyFrames>
														<ColorAnimation
															Storyboard.TargetName="IndeterminateProgressBarIndicator2"
															Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)"
															To="{ThemeResource ProgressBarPausedForegroundColor}"
															Duration="0:0:0.167" />
														<DoubleAnimationUsingKeyFrames Storyboard.TargetName="ProgressBarTrack" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
															<SplineDoubleKeyFrame
																KeySpline="0.0, 0.0, 0.0, 1.0"
																KeyTime="0:0:0"
																Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationStartPosition}" />
															<SplineDoubleKeyFrame
																KeySpline="0.0, 0.0, 0.0, 1.0"
																KeyTime="0:0:0.75"
																Value="0" />
														</DoubleAnimationUsingKeyFrames>
													</Storyboard>
												</VisualState>
											</VisualStateGroup>
										</VisualStateManager.VisualStateGroups>
									</Grid>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>
				</ResourceDictionary>
				<ResourceDictionary>
					<ResourceDictionary.ThemeDictionaries>
						<ResourceDictionary x:Key="Default">
							<StaticResource x:Key="ToggleButtonBackgroundChecked" ResourceKey="ControlFillColorDefaultBrush" />
							<StaticResource x:Key="ToggleButtonBackgroundCheckedPointerOver" ResourceKey="ControlFillColorSecondaryBrush" />
							<StaticResource x:Key="ToggleButtonBackgroundCheckedPressed" ResourceKey="ControlFillColorTertiaryBrush" />
							<StaticResource x:Key="ToggleButtonBackgroundCheckedDisabled" ResourceKey="ControlFillColorDisabledBrush" />
							<StaticResource x:Key="ToggleButtonForegroundChecked" ResourceKey="TextFillColorPrimaryBrush" />
							<StaticResource x:Key="ToggleButtonForegroundCheckedPointerOver" ResourceKey="TextFillColorPrimaryBrush" />
							<StaticResource x:Key="ToggleButtonForegroundCheckedPressed" ResourceKey="TextFillColorSecondaryBrush" />
							<StaticResource x:Key="ToggleButtonForegroundCheckedDisabled" ResourceKey="TextFillColorDisabledBrush" />
							<StaticResource x:Key="ToggleButtonBorderBrushChecked" ResourceKey="ControlElevationBorderBrush" />
							<StaticResource x:Key="ToggleButtonBorderBrushCheckedPointerOver" ResourceKey="ControlElevationBorderBrush" />
							<StaticResource x:Key="ToggleButtonBorderBrushCheckedPressed" ResourceKey="ControlStrokeColorDefaultBrush" />
							<StaticResource x:Key="ToggleButtonBorderBrushCheckedDisabled" ResourceKey="ControlStrokeColorDefaultBrush" />
						</ResourceDictionary>
						<ResourceDictionary x:Key="HighContrast">
							<StaticResource x:Key="ToggleButtonBackgroundChecked" ResourceKey="SystemControlBackgroundBaseLowBrush" />
							<StaticResource x:Key="ToggleButtonBackgroundCheckedPointerOver" ResourceKey="SystemColorHighlightTextColorBrush" />
							<StaticResource x:Key="ToggleButtonBackgroundCheckedPressed" ResourceKey="SystemColorHighlightTextColorBrush" />
							<StaticResource x:Key="ToggleButtonBackgroundCheckedDisabled" ResourceKey="SystemControlBackgroundBaseLowBrush" />
							<StaticResource x:Key="ToggleButtonForegroundChecked" ResourceKey="SystemControlForegroundBaseHighBrush" />
							<StaticResource x:Key="ToggleButtonForegroundCheckedPointerOver" ResourceKey="SystemControlHighlightBaseHighBrush" />
							<StaticResource x:Key="ToggleButtonForegroundCheckedPressed" ResourceKey="SystemControlHighlightBaseHighBrush" />
							<StaticResource x:Key="ToggleButtonForegroundCheckedDisabled" ResourceKey="SystemControlDisabledBaseMediumLowBrush" />
							<StaticResource x:Key="ToggleButtonBorderBrushChecked" ResourceKey="SystemControlForegroundTransparentBrush" />
							<StaticResource x:Key="ToggleButtonBorderBrushCheckedPointerOver" ResourceKey="SystemControlHighlightBaseMediumLowBrush" />
							<StaticResource x:Key="ToggleButtonBorderBrushCheckedPressed" ResourceKey="SystemColorHighlightTextColorBrush" />
							<StaticResource x:Key="ToggleButtonBorderBrushCheckedDisabled" ResourceKey="SystemControlDisabledTransparentBrush" />
						</ResourceDictionary>
						<ResourceDictionary x:Key="Light">
							<StaticResource x:Key="ToggleButtonBackgroundChecked" ResourceKey="ControlFillColorDefaultBrush" />
							<StaticResource x:Key="ToggleButtonBackgroundCheckedPointerOver" ResourceKey="ControlFillColorSecondaryBrush" />
							<StaticResource x:Key="ToggleButtonBackgroundCheckedPressed" ResourceKey="ControlFillColorTertiaryBrush" />
							<StaticResource x:Key="ToggleButtonBackgroundCheckedDisabled" ResourceKey="ControlFillColorDisabledBrush" />
							<StaticResource x:Key="ToggleButtonForegroundChecked" ResourceKey="TextFillColorPrimaryBrush" />
							<StaticResource x:Key="ToggleButtonForegroundCheckedPointerOver" ResourceKey="TextFillColorPrimaryBrush" />
							<StaticResource x:Key="ToggleButtonForegroundCheckedPressed" ResourceKey="TextFillColorSecondaryBrush" />
							<StaticResource x:Key="ToggleButtonForegroundCheckedDisabled" ResourceKey="TextFillColorDisabledBrush" />
							<StaticResource x:Key="ToggleButtonBorderBrushChecked" ResourceKey="ControlElevationBorderBrush" />
							<StaticResource x:Key="ToggleButtonBorderBrushCheckedPointerOver" ResourceKey="ControlElevationBorderBrush" />
							<StaticResource x:Key="ToggleButtonBorderBrushCheckedPressed" ResourceKey="ControlStrokeColorDefaultBrush" />
							<StaticResource x:Key="ToggleButtonBorderBrushCheckedDisabled" ResourceKey="ControlStrokeColorDefaultBrush" />
						</ResourceDictionary>
					</ResourceDictionary.ThemeDictionaries>

					<converters:EnumToStringConverter x:Key="EnumToStringConverter" />
					<wctconverters:BoolNegationConverter x:Key="BoolNegationConverter" />
					<wctconverters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
					<wctconverters:BoolToObjectConverter
						x:Key="NegateBoolToVisibilityConverter"
						FalseValue="Visible"
						TrueValue="Collapsed" />
					<wctconverters:EmptyStringToObjectConverter
						x:Key="EmptyStringToBoolConverter"
						EmptyValue="False"
						NotEmptyValue="True" />
					<wctconverters:EmptyCollectionToObjectConverter
						x:Key="EmptyCollectionToBoolConverter"
						EmptyValue="False"
						NotEmptyValue="True" />

					<DataTemplate x:Name="StatusCenterItemCardStyleDataTemplate" x:DataType="statuscenter:StatusCenterItem">
						<UserControl>
							<Grid
								x:Name="ContentRoot"
								Padding="8,8,8,8"
								HorizontalAlignment="Stretch"
								AutomationProperties.Name="{x:Bind Header, Mode=OneWay}"
								Background="{StaticResource CardBackgroundFillColorDefaultBrush}"
								BorderBrush="{ThemeResource CardStrokeColorDefaultBrush}"
								BorderThickness="1"
								CornerRadius="{StaticResource OverlayCornerRadius}">
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
								</Grid.RowDefinitions>

								<Grid.Transitions>
									<TransitionCollection>
										<RepositionThemeTransition />
									</TransitionCollection>
								</Grid.Transitions>

								<!--  Header  -->
								<Grid
									x:Name="StatusCenterItemHeaderPanel"
									Grid.Row="0"
									ColumnSpacing="12">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="*" />
										<ColumnDefinition Width="Auto" />
									</Grid.ColumnDefinitions>

									<!--  Header Icon  -->
									<Grid Grid.Column="0">

										<!--  Circle Icon 32x32  -->
										<TextBlock
											x:Name="SeverityBackgroundFontIcon"
											HorizontalAlignment="Center"
											VerticalAlignment="Center"
											FontFamily="{ThemeResource SymbolThemeFontFamily}"
											FontSize="32"
											Text="&#xE91F;" />

										<!--  State Icon 16x16  -->
										<PathIcon
											x:Name="SeverityForegroundPathIcon"
											Width="16"
											Height="16"
											HorizontalAlignment="Center"
											VerticalAlignment="Center" />

									</Grid>

									<!--  Header Title & Description  -->
									<StackPanel
										x:Name="StatusCenterItemHeadedrPanel"
										Grid.Column="1"
										VerticalAlignment="Center">

										<TextBlock
											x:Name="HeaderTextBlock"
											x:Load="{x:Bind Header, Converter={StaticResource EmptyStringToBoolConverter}, Mode=OneWay}"
											MaxLines="1"
											Style="{StaticResource BodyTextBlockStyle}"
											Text="{x:Bind Header, Mode=OneWay}"
											TextTrimming="CharacterEllipsis"
											TextWrapping="NoWrap" />

										<TextBlock
											x:Name="DescriptionTextBlock"
											x:Load="{x:Bind SubHeader, Converter={StaticResource EmptyStringToBoolConverter}, Mode=OneWay}"
											Foreground="{ThemeResource TextFillColorSecondaryBrush}"
											MaxLines="1"
											Style="{StaticResource CaptionTextBlockStyle}"
											Text="{x:Bind SubHeader, Mode=OneWay}"
											TextTrimming="CharacterEllipsis"
											TextWrapping="NoWrap"
											ToolTipService.ToolTip="{x:Bind SubHeader, Mode=OneWay}" />

									</StackPanel>

									<!--  Action Buttons  -->
									<StackPanel
										Grid.Column="2"
										VerticalAlignment="Center"
										Spacing="8">

										<!--  Dismiss Item  -->
										<Button
											x:Name="CloseItemButton"
											Width="32"
											Height="32"
											Padding="0"
											x:Load="{x:Bind IsInProgress, Converter={StaticResource BoolNegationConverter}, Mode=OneWay}"
											AutomationProperties.Name="{helpers:ResourceString Name=Clear}"
											Background="Transparent"
											BorderBrush="Transparent"
											Click="CloseItemButton_Click"
											ToolTipService.ToolTip="{helpers:ResourceString Name=Clear}">
											<Button.Content>
												<FontIcon FontSize="16" Glyph="&#xE711;" />
											</Button.Content>
										</Button>

										<!--  Expand & Collapse Chevron  -->
										<!--<ToggleButton
											x:Name="ExpandCollapseChevronItemButton"
											Width="32"
											Height="32"
											Padding="0"
											x:Load="{x:Bind IsInProgress, Mode=OneWay}"
											Background="Transparent"
											BorderBrush="Transparent"
											IsChecked="{x:Bind IsExpanded, Mode=TwoWay}">
											<AnimatedIcon
												x:Name="ExpandCollapseChevron"
												Width="16"
												Height="16"
												HorizontalAlignment="Center"
												VerticalAlignment="Center"
												AnimatedIcon.State="{x:Bind AnimatedIconState, Mode=OneWay}"
												AutomationProperties.AccessibilityView="Raw"
												RenderTransformOrigin="0.5, 0.5">
												<animatedvisuals:AnimatedChevronUpDownSmallVisualSource />
												<AnimatedIcon.FallbackIconSource>
													<FontIconSource
														FontFamily="{StaticResource SymbolThemeFontFamily}"
														FontSize="16"
														Glyph="{StaticResource ExpanderChevronDownGlyph}"
														IsTextScaleFactorEnabled="False" />
												</AnimatedIcon.FallbackIconSource>
											</AnimatedIcon>
										</ToggleButton>-->

									</StackPanel>

								</Grid>

								<!--  Progress Bar & Graph Display  -->
								<Grid
									x:Name="StatusCenterItemRichProgressDisplayPanel"
									Grid.Row="1"
									Margin="0,8,0,0"
									ColumnSpacing="12"
									Visibility="{x:Bind IsInProgress, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*" />
										<ColumnDefinition Width="Auto" />
									</Grid.ColumnDefinitions>

									<!--  ProgressBar  -->
									<ProgressBar
										x:Name="MainProgressBar"
										Margin="4,8,0,8"
										IsIndeterminate="{x:Bind IsCancelled, Mode=OneWay}"
										Visibility="{x:Bind IsExpanded, Converter={StaticResource NegateBoolToVisibilityConverter}, Mode=OneWay}"
										Value="{x:Bind ProgressPercentage, Mode=OneWay}" />

									<!--  Graph  -->
									<!--<Grid
										x:Name="MainGraphCartesianChartClipGrid"
										Height="64"
										Margin="4,8,0,8"
										BorderBrush="{ThemeResource DividerStrokeColorDefaultBrush}"
										BorderThickness="1"
										CornerRadius="4"
										Visibility="{x:Bind IsExpanded, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}">

										<ProgressBar
											x:Name="SecondaryProgressBar"
											Height="64"
											MinHeight="64"
											CornerRadius="4,0,0,4"
											IsIndeterminate="{x:Bind IsCancelled, Mode=OneWay}"
											Style="{StaticResource CustomProgressBarStyle}"
											Visibility="{x:Bind IsExpanded, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}"
											Value="{x:Bind ProgressPercentage, Mode=OneWay}" />

										<livecharts2:CartesianChart
											x:Name="MainCartesianChart"
											Series="{x:Bind Series, Mode=OneWay}"
											TooltipPosition="Hidden"
											XAxes="{x:Bind XAxes}"
											YAxes="{x:Bind YAxes}" />

									</Grid>-->

									<!--  Action Buttons  -->
									<Grid Grid.Column="1">

										<Button
											x:Name="CancelItemButton"
											Width="32"
											Height="32"
											Padding="0"
											x:Load="{x:Bind IsCancelable, Mode=OneWay}"
											AutomationProperties.Name="{helpers:ResourceString Name=Cancel}"
											Background="Transparent"
											BorderBrush="Transparent"
											Command="{x:Bind CancelCommand}"
											DataContext="{x:Bind}"
											IsEnabled="{x:Bind IsCancelled, Mode=OneWay, Converter={StaticResource BoolNegationConverter}}"
											ToolTipService.ToolTip="{helpers:ResourceString Name=Cancel}"
											Visibility="{x:Bind IsInProgress, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}">
											<Button.Content>
												<FontIcon FontSize="16" Glyph="&#xE711;" />
											</Button.Content>
										</Button>

									</Grid>

								</Grid>

								<!--  Processed Bytes & Estimated Time Display  -->
								<Grid Grid.Row="2" />

								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup x:Name="ThemeColorStates">
										<VisualState x:Name="InProgressState">
											<VisualState.StateTriggers>
												<wcttriggers:IsEqualStateTrigger Value="{x:Bind ItemKind, Converter={StaticResource EnumToStringConverter}, Mode=OneWay}" To="InProgress" />
											</VisualState.StateTriggers>
											<VisualState.Setters>
												<Setter Target="SeverityBackgroundFontIcon.Foreground" Value="{ThemeResource AccentFillColorDefaultBrush}" />
												<Setter Target="SeverityBackgroundFontIcon.Opacity" Value="0.1" />
												<Setter Target="SeverityForegroundPathIcon.Foreground" Value="{ThemeResource AccentFillColorDefaultBrush}" />
											</VisualState.Setters>
										</VisualState>
										<VisualState x:Name="SuccessfulState">
											<VisualState.StateTriggers>
												<wcttriggers:IsEqualStateTrigger Value="{x:Bind ItemKind, Converter={StaticResource EnumToStringConverter}, Mode=OneWay}" To="Successful" />
											</VisualState.StateTriggers>
											<VisualState.Setters>
												<Setter Target="SeverityBackgroundFontIcon.Foreground" Value="{ThemeResource SystemFillColorSuccessBackgroundBrush}" />
												<Setter Target="SeverityForegroundPathIcon.Foreground" Value="{ThemeResource SystemFillColorSuccessBrush}" />
											</VisualState.Setters>
										</VisualState>
										<VisualState x:Name="ErrorState">
											<VisualState.StateTriggers>
												<wcttriggers:IsEqualStateTrigger Value="{x:Bind ItemKind, Converter={StaticResource EnumToStringConverter}, Mode=OneWay}" To="Error" />
											</VisualState.StateTriggers>
											<VisualState.Setters>
												<Setter Target="SeverityBackgroundFontIcon.Foreground" Value="{ThemeResource SystemFillColorCriticalBackgroundBrush}" />
												<Setter Target="SeverityForegroundPathIcon.Foreground" Value="{ThemeResource SystemFillColorCriticalBrush}" />
											</VisualState.Setters>
										</VisualState>
									</VisualStateGroup>
									<VisualStateGroup x:Name="IconStates">
										<VisualState x:Name="CopyIconState">
											<VisualState.StateTriggers>
												<wcttriggers:IsEqualStateTrigger Value="{x:Bind ItemIconKind, Converter={StaticResource EnumToStringConverter}, Mode=OneWay}" To="Copy" />
											</VisualState.StateTriggers>
											<VisualState.Setters>
												<Setter Target="SeverityForegroundPathIcon.Data" Value="{StaticResource App.Theme.PathIcon.ActionCopy}" />
											</VisualState.Setters>
										</VisualState>
										<VisualState x:Name="MoveIconState">
											<VisualState.StateTriggers>
												<wcttriggers:IsEqualStateTrigger Value="{x:Bind ItemIconKind, Converter={StaticResource EnumToStringConverter}, Mode=OneWay}" To="Move" />
											</VisualState.StateTriggers>
											<VisualState.Setters>
												<Setter Target="SeverityForegroundPathIcon.Data" Value="{StaticResource App.Theme.PathIcon.ActionMove}" />
											</VisualState.Setters>
										</VisualState>
										<VisualState x:Name="DeleteIconState">
											<VisualState.StateTriggers>
												<wcttriggers:IsEqualStateTrigger Value="{x:Bind ItemIconKind, Converter={StaticResource EnumToStringConverter}, Mode=OneWay}" To="Delete" />
											</VisualState.StateTriggers>
											<VisualState.Setters>
												<Setter Target="SeverityForegroundPathIcon.Data" Value="{StaticResource App.Theme.PathIcon.ActionDelete}" />
											</VisualState.Setters>
										</VisualState>
										<VisualState x:Name="RecycleIconState">
											<VisualState.StateTriggers>
												<wcttriggers:IsEqualStateTrigger Value="{x:Bind ItemIconKind, Converter={StaticResource EnumToStringConverter}, Mode=OneWay}" To="Recycle" />
											</VisualState.StateTriggers>
											<VisualState.Setters>
												<Setter Target="SeverityForegroundPathIcon.Data" Value="{StaticResource App.Theme.PathIcon.ActionDelete}" />
											</VisualState.Setters>
										</VisualState>
										<VisualState x:Name="SuccessfulIconState">
											<VisualState.StateTriggers>
												<wcttriggers:IsEqualStateTrigger Value="{x:Bind ItemIconKind, Converter={StaticResource EnumToStringConverter}, Mode=OneWay}" To="Successful" />
											</VisualState.StateTriggers>
											<VisualState.Setters>
												<Setter Target="SeverityForegroundPathIcon.Data" Value="{StaticResource App.Theme.PathIcon.ActionSuccess}" />
											</VisualState.Setters>
										</VisualState>
										<VisualState x:Name="ErrorIconState">
											<VisualState.StateTriggers>
												<wcttriggers:IsEqualStateTrigger Value="{x:Bind ItemIconKind, Converter={StaticResource EnumToStringConverter}, Mode=OneWay}" To="Error" />
											</VisualState.StateTriggers>
											<VisualState.Setters>
												<Setter Target="SeverityForegroundPathIcon.Data" Value="{StaticResource App.Theme.PathIcon.ActionInfo}" />
											</VisualState.Setters>
										</VisualState>
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
							</Grid>
						</UserControl>
					</DataTemplate>

				</ResourceDictionary>
			</ResourceDictionary.MergedDictionaries>
		</ResourceDictionary>
	</UserControl.Resources>

	<Grid x:Name="RootGrid">
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="*" />
		</Grid.RowDefinitions>

		<!--  Header  -->
		<Grid x:Name="HeaderGrid" Padding="12">

			<!--  Header Texts  -->
			<TextBlock
				VerticalAlignment="Center"
				FontSize="14"
				Style="{StaticResource BodyStrongTextBlockStyle}"
				Text="{helpers:ResourceString Name=StatusCenter}" />

			<!--  Remove All Cards Button  -->
			<Button
				x:Name="CloseAllItemsButton"
				Height="24"
				Padding="8,0"
				HorizontalAlignment="Right"
				Click="CloseAllItemsButton_Click"
				Content="{helpers:ResourceString Name=ClearCompleted}"
				FontSize="12"
				IsEnabled="{x:Bind ViewModel.HasAnyItem, Mode=OneWay}" />

		</Grid>

		<!--  Status Center Items  -->
		<ListView
			x:Name="StatusCenterItemsListView"
			Grid.Row="1"
			Padding="12,0,12,0"
			VerticalAlignment="Stretch"
			ItemTemplate="{StaticResource StatusCenterItemCardStyleDataTemplate}"
			ItemsSource="{x:Bind ViewModel.StatusCenterItems, Mode=OneWay}"
			ScrollViewer.VerticalScrollBarVisibility="Auto"
			ScrollViewer.VerticalScrollMode="Enabled"
			SelectionMode="None">

			<!--  Item Style  -->
			<ListView.ItemContainerStyle>
				<Style BasedOn="{StaticResource DefaultListViewItemStyle}" TargetType="ListViewItem">
					<Setter Property="Margin" Value="0,2,0,2" />
					<Setter Property="Padding" Value="0,0,0,0" />
				</Style>
			</ListView.ItemContainerStyle>

		</ListView>

		<TextBlock
			x:Name="NoItemsMessageTextBlock"
			Grid.Row="1"
			HorizontalAlignment="Center"
			VerticalAlignment="Center"
			x:Load="{x:Bind ViewModel.HasAnyItem, Converter={StaticResource BoolNegationConverter}, Mode=OneWay}"
			Text="No items here." />

	</Grid>
</UserControl>
