trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  SOLUTION_PATH: 'Files.sln'
  PLATFORM: 'x64'
  CONFIGURATION: 'Debug'
  APPX_PACKAGE_PATH: '$(build.artifactStagingDirectory)\AppxPackages\\'

steps:
- task: DownloadSecureFile@1
  displayName: 'Download BingMaps dev key'
  name: mapsDevKey
  displayName: 'Download Bing Maps Dev Key'
  inputs:
    secureFile: 'BingMapsKey.txt'

- task: CopyFiles@2
  displayName: 'Copy the key'
  inputs:
    SourceFolder: '$(Agent.TempDirectory)'
    Contents: '$(mapsDevKey.secureFilePath)'
    TargetFolder: '$(Build.SourcesDirectory)\src\Files.App\Resources'
    overWrite: true

- task: UseDotNet@2
  displayName: 'Install .NET 7'
  inputs:
    packageType: sdk
    version: 7.0.x
    includePreviewVersions: true

- task: CmdLine@2
  displayName: 'Use Visual Studio 2022 Preview'
  inputs:
    script: |
      for /f %%a in ('dir /b /a:d %localappdata%\Microsoft\VisualStudio\17*') do echo UsePreviews=True>%localappdata%\Microsoft\VisualStudio\%%a\sdk.txt

- task: MSBuild@1
  displayName: 'Restore the solution'
  inputs:
    platform: '$(PLATFORM)'
    solution: '$(SOLUTION_PATH)'
    configuration: '$(CONFIGURATION)'
    msbuildArguments: |
      /t:restore
      /p:Configuration="$(CONFIGURATION)"
      /p:Platform="$(PLATFORM)"
      /p:PublishReadyToRun=true
    maximumCpuCount: true

- task: MSBuild@1
  displayName: 'Build the packaging project'
  inputs:
    platform: '$(PLATFORM)'
    solution: '**/*.wapproj'
    configuration: '$(CONFIGURATION)'
    msbuildArguments: |
      /t:build;_GenerateAppxPackage
      /p:Configuration="$(CONFIGURATION)"
      /p:Platform="$(PLATFORM)"
      /p:AppxBundle=Never
      /p:AppxBundlePlatforms="$(PLATFORM)"
      /p:AppxPackageDir="$(APPX_PACKAGE_PATH)"
      /p:AppxPackageSigningEnabled=true
      /p:PackageCertificateKeyFile="$(Build.SourcesDirectory)\builds\Files_SelfSigned.pfx"
      /p:PackageCertificatePassword=""
      /p:PackageCertificateThumbprint=""
      /p:UapAppxPackageBuildMode=CI
    maximumCpuCount: true

- task: DotNetCoreCLI@2
  displayName: 'Build the tests'
  inputs:
    command: 'build'
    arguments: |
      ./tests/Files.InteractionTests/Files.InteractionTests.csproj
      --configuration $(buildConfiguration)

- task: PowerShell@2
  displayName: 'Install the app'
  inputs:
    targetType: 'inline'
    script: |
      # Find correct folder and run app install script.
      cd $(APPX_PACKAGE_PATH)

      $AppBundle = Get-ChildItem -Filter Files*Test -Name
      echo $AppBundle
      cd $AppBundle
      ./Install.ps1 -Force
      Get-AppxPackage
    errorActionPreference: 'continue'
    failOnStderr: true
    workingDirectory: '$(System.DefaultWorkingDirectory)'

- task: Windows Application Driver@0
  displayName: 'Start WinAppDriver'
  inputs:
    OperationType: 'Start'
    AgentResolution: '1080p'

- task: VSTest@2
  displayName: 'Test the app'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*Files.InteractionTests.dll
      !**\*TestAdapter.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'

- task: Windows Application Driver@0
  displayName: 'Stop WinAppDriver'
  inputs:
    OperationType: 'Stop'
    AgentResolution: '1080p'

- task: CopyFiles@2
  displayName: 'Copy build artifacts'
  inputs:
    SourceFolder: '$(system.defaultworkingdirectory)'
    Contents: '**\bin\$(CONFIGURATION)\**'
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
